/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Reentrancy, ReentrancyInterface } from "../Reentrancy";

const _abi = [
  {
    inputs: [],
    name: "LockedError",
    type: "error",
  },
];

const _bytecode =
  "0x60806040526001600055348015601457600080fd5b5060168060226000396000f3fe6080604052600080fdfea164736f6c6343000806000a";

export class Reentrancy__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Reentrancy> {
    return super.deploy(overrides || {}) as Promise<Reentrancy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Reentrancy {
    return super.attach(address) as Reentrancy;
  }
  connect(signer: Signer): Reentrancy__factory {
    return super.connect(signer) as Reentrancy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentrancyInterface {
    return new utils.Interface(_abi) as ReentrancyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reentrancy {
    return new Contract(address, _abi, signerOrProvider) as Reentrancy;
  }
}
