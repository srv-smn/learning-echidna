/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestReplicationMath,
  TestReplicationMathInterface,
} from "../TestReplicationMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "int128",
        name: "value",
        type: "int128",
      },
    ],
    name: "InverseOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "PERCENTAGE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "YEAR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "reserveRisky",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveStable",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "strike",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sigma",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tau",
        type: "uint256",
      },
    ],
    name: "calcInvariant",
    outputs: [
      {
        internalType: "int128",
        name: "invariant",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sigma",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tau",
        type: "uint256",
      },
    ],
    name: "getProportionalVolatility",
    outputs: [
      {
        internalType: "int128",
        name: "vol",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "invariantLast",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "reserveRisky",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "strike",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sigma",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tau",
        type: "uint256",
      },
    ],
    name: "getStableGivenRisky",
    outputs: [
      {
        internalType: "int128",
        name: "reserveStable",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "scaleFactorRisky",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "scaleFactorStable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prec0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "prec1",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611a00806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806355ebb82511610076578063839145401161005b5780638391454014610125578063aaf5eb681461012f578063b25f1db11461013d57600080fd5b806355ebb8251461010957806367d3b4901461011257600080fd5b80631ab06ee5146100a8578063293315f2146100c3578063374eb2bc146100da5780634dd0d05614610100575b600080fd5b6100c16100b6366004611913565b600091909155600155565b005b6127105b6040519081526020015b60405180910390f35b6100ed6100e8366004611913565b610150565b604051600f9190910b81526020016100d1565b6100c760015481565b6100c760005481565b6100ed6101203660046118c9565b610163565b6301e185586100c7565b670de0b6b3a76400006100c7565b6100ed61014b366004611935565b61018e565b600061015c83836101a3565b9392505050565b600061018460015461017e886000546001548a8a8a8a6101e0565b906102b9565b9695505050505050565b600061018460005460015488888888886102e2565b6000806101ba6101b284610321565b600f0b610337565b905060006101c785610359565b90506101d7600f82900b83610367565b95945050505050565b6000806101ed85886102b9565b905060006101fb878a6102b9565b9050600061020d600160401b836103a7565b9050841561028957600061022187876101a3565b9050600061023183600f0b6103e3565b90506000610243600f83900b846103a7565b9050600061026e8f61026561025a85600f0b6104b5565b600f8b900b90610367565b600f0b9061055a565b905061027e600f82900b8e610596565b9750505050506102ab565b6102a88961029f8d610265600f88900b86610367565b600f0b90610596565b93505b505050979650505050505050565b6000806102ce83670de0b6b3a7640000611970565b90506102da84826105bb565b949350505050565b6000806102f560008a8a8a8989896101e0565b90506000610303828a6102b9565b90506000610311888b6102b9565b90506102a8600f82900b836103a7565b6000610331826301e185586105bb565b92915050565b60008082600f0b121561034957600080fd5b610331604083600f0b901b610604565b6000610331826127106105bb565b6000600f83810b9083900b0260401d60016001607f1b0319811280159061039e57506f7fffffffffffffffffffffffffffffff8113155b61015c57600080fd5b6000600f82810b9084900b0360016001607f1b0319811280159061039e57506f7fffffffffffffffffffffffffffffff81131561015c57600080fd5b6000600160401b600f83900b1215806104005750600082600f0b13155b15610441576040517f72cc98e8000000000000000000000000000000000000000000000000000000008152600f83900b600482015260240160405180910390fd5b67f999999999999999600f83900b138015906104695750670666666666666666600f83900b12155b15610477576103318261077f565b670666666666666666600f83900b1215610494576103318261082a565b60006104ac6104a7600160401b856103a7565b61082a565b61015c90611992565b6000806104cf600f84900b68016a09e667f3bcc9086108f4565b9050600061050d6105026104f76104e885600f0b610955565b6753dd02a4f5ee2e4690610367565b600160401b9061055a565b600160401b906108f4565b9050600061051b8383610988565b9050600083600f0b12156105385761053581600f0b610a58565b90505b600061018461054b600160401b8461055a565b67800000000000000090610367565b6000600f83810b9083900b0160016001607f1b0319811280159061039e57506f7fffffffffffffffffffffffffffffff81131561015c57600080fd5b6000806105ab83670de0b6b3a7640000611970565b90506102da600f85900b82610a73565b6000816105c757600080fd5b60006105d38484610af5565b90506f7fffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff8216111561015c57600080fd5b60008161061357506000919050565b81600170010000000000000000000000000000000082106106395760809190911c9060401b5b600160401b821061064f5760409190911c9060201b5b64010000000082106106665760209190911c9060101b5b62010000821061067b5760109190911c9060081b5b610100821061068f5760089190911c9060041b5b601082106106a25760049190911c9060021b5b600882106106ae5760011b5b60018185816106bf576106bf6119dd565b048201901c905060018185816106d7576106d76119dd565b048201901c905060018185816106ef576106ef6119dd565b048201901c90506001818581610707576107076119dd565b048201901c9050600181858161071f5761071f6119dd565b048201901c90506001818581610737576107376119dd565b048201901c9050600181858161074f5761074f6119dd565b048201901c90506000818581610767576107676119dd565b04905080821061077757806101d7565b509392505050565b600080610798600f84900b6780000000000000006103a7565b905060006107aa600f83900b83610367565b905060006101d761081f61080f6107e76721d0a04b0e9b94f16102656107d967c2bf5d74c724e53e1989610367565b610265600f8a900b8a610367565b6108066726a8f3c1f21b336e6102656787c57e5da70d3c8f1989610367565b600f0b906108f4565b68015d71f5721242c7879061055a565b600f85900b90610367565b60008061084c6101b2610844610502600f87900b87610367565b600f0b610c83565b905060006108706707a1e70f720eca436102656801000bf627fa1884101985610367565b905060006108946810aeac93f55267a9a561026568041ed34a256149023686610367565b905060006108c968072c7d592d021fb1db6102656108bb6808c27b4617f5f800ea88610367565b610265600f89900b89610367565b905060006108e96108de600f85900b846108f4565b600f86900b9061055a565b979650505050505050565b600081600f0b6000141561090757600080fd5b600082600f0b604085600f0b901b81610922576109226119dd565b05905060016001607f1b0319811280159061039e57506f7fffffffffffffffffffffffffffffff81131561015c57600080fd5b6000600f82900b60016001607f1b0319141561097057600080fd5b600082600f0b126109815781610331565b5060000390565b6000806109da61081f6109ca6109bf6109ae600f88900b68010fb844255a12d72e610367565b68017401c57014c38f13199061055a565b600f87900b90610367565b68016a09e667f3bcc9089061055a565b90506000610a066109f76109bf6748d4c730f051a5fd198561055a565b67413c831bb169f8749061055a565b90506000610184610a4d610a42610a37610a2f610a27600f8c900b8c610367565b600f0b610a58565b600f0b610cbd565b600f86900b90610367565b600f88900b90610367565b600160401b906103a7565b6000600f82900b60016001607f1b0319141561098157600080fd5b600081610a8257506000610331565b600083600f0b1215610a9357600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff811115610adc57600080fd5b60401b8119811115610aed57600080fd5b019392505050565b600081610b0157600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff8411610b3d5782604085901b81610b3557610b356119dd565b049050610c66565b60c084811c6401000000008110610b56576020918201911c5b620100008110610b68576010918201911c5b6101008110610b79576008918201911c5b60108110610b89576004918201911c5b60048110610b99576002918201911c5b60028110610ba8576001820191505b60bf820360018603901c6001018260ff0387901b81610bc957610bc96119dd565b0492506fffffffffffffffffffffffffffffffff831115610be957600080fd5b608085901c83026fffffffffffffffffffffffffffffffff8616840260c088901c604089901b82811015610c1e576001820391505b608084901b92900382811015610c35576001820391505b829003608084901c8214610c4b57610c4b6119c7565b888181610c5a57610c5a6119dd565b04870196505050505050505b6fffffffffffffffffffffffffffffffff81111561015c57600080fd5b60008082600f0b13610c9457600080fd5b6080610c9f83610d17565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60006840000000000000000082600f0b12610cd757600080fd5b683fffffffffffffffff1982600f0b1215610cf457506000919050565b610331608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d610df6565b60008082600f0b13610d2857600080fd5b6000600f83900b600160401b8112610d42576040918201911d5b6401000000008112610d56576020918201911d5b620100008112610d68576010918201911d5b6101008112610d79576008918201911d5b60108112610d89576004918201911d5b60048112610d99576002918201911d5b60028112610da8576001820191505b603f19820160401b600f85900b607f8490031b6780000000000000005b6000811315610deb5790800260ff81901c8281029390930192607f011c9060011d610dc5565b509095945050505050565b60006840000000000000000082600f0b12610e1057600080fd5b683fffffffffffffffff1982600f0b1215610e2d57506000919050565b6f8000000000000000000000000000000060006780000000000000008416600f0b1315610e6b5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315610e98577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315610ec5577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315610ef25770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315610f1f577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315610f4c57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315610f795770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b1315610fa657700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315610fd25770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315610ffe577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b131561102a57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315611056577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561108257700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156110ae5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156110da577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156111065770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315611131577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b131561115c57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156111875770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b13156111b257700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156111dd5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315611208577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561123357700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b131561125e577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561128857700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156112b25770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b13156112dc577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156113065770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315611330577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561135a57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156113845770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b13156113ae57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156113d75770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315611400577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561142957700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315611452577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561147b57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156114a45770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156114cd577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156114f65770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b131561151e577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561154657700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b131561156e5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561159657700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156115be5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b13156115e6577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561160e57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315611636577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561165d57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156116845770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156116ab577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156116d25770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b13156116f9577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561172057700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156117475770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561176e57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156117945770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b13156117ba577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156117e057700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315611806577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b131561182c57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156118525770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315611878577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b131561189e5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff81111561033157600080fd5b600080600080600060a086880312156118e157600080fd5b853580600f0b81146118f257600080fd5b97602087013597506040870135966060810135965060800135945092505050565b6000806040838503121561192657600080fd5b50508035926020909101359150565b600080600080600060a0868803121561194d57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008261198d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600f0b60016001607f1b03198114156119be57634e487b7160e01b600052601160045260246000fd5b60000392915050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea164736f6c6343000806000a";

export class TestReplicationMath__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestReplicationMath> {
    return super.deploy(overrides || {}) as Promise<TestReplicationMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestReplicationMath {
    return super.attach(address) as TestReplicationMath;
  }
  connect(signer: Signer): TestReplicationMath__factory {
    return super.connect(signer) as TestReplicationMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestReplicationMathInterface {
    return new utils.Interface(_abi) as TestReplicationMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestReplicationMath {
    return new Contract(address, _abi, signerOrProvider) as TestReplicationMath;
  }
}
