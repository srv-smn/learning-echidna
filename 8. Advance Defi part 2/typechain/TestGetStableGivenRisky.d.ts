/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestGetStableGivenRiskyInterface extends ethers.utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "getStableGivenRisky(int128,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "scaleFactorRisky()": FunctionFragment;
    "scaleFactorStable()": FunctionFragment;
    "set(uint256,uint256)": FunctionFragment;
    "step0(uint256)": FunctionFragment;
    "step1(uint256,uint256)": FunctionFragment;
    "step2(uint256)": FunctionFragment;
    "step3(int128)": FunctionFragment;
    "step4(int128,int128)": FunctionFragment;
    "step5(int128,int128,int128)": FunctionFragment;
    "testStep3(uint256)": FunctionFragment;
    "testStep4(uint256,uint256,uint256)": FunctionFragment;
    "testStep5(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStableGivenRisky",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "scaleFactorRisky",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactorStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "step0", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "step1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "step2", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "step3", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "step4",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "step5",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testStep3",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testStep4",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testStep5",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStableGivenRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testStep3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testStep4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testStep5", data: BytesLike): Result;

  events: {};
}

export class TestGetStableGivenRisky extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestGetStableGivenRiskyInterface;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      precStable: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveStable: BigNumber }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaleFactorStable(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    step0(
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { K: BigNumber }>;

    step1(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vol: BigNumber }>;

    step2(
      reserveRisky: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserve: BigNumber }>;

    step3(
      reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { phi: BigNumber }>;

    step4(
      phi: BigNumberish,
      vol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    step5(
      K: BigNumberish,
      input: BigNumberish,
      invariantLast: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveStable: BigNumber }>;

    testStep3(
      reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { phi: BigNumber }>;

    testStep4(
      reserve: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    testStep5(
      reserve: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveStable: BigNumber }>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  getStableGivenRisky(
    invariantLast: BigNumberish,
    precStable: BigNumberish,
    reserveRisky: BigNumberish,
    strike: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

  scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    prec0: BigNumberish,
    prec1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  step0(strike: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  step1(
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  step2(
    reserveRisky: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  step3(reserve: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  step4(
    phi: BigNumberish,
    vol: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  step5(
    K: BigNumberish,
    input: BigNumberish,
    invariantLast: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testStep3(
    reserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testStep4(
    reserve: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testStep5(
    reserve: BigNumberish,
    strike: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      precStable: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    step0(strike: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    step1(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step2(
      reserveRisky: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step3(reserve: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    step4(
      phi: BigNumberish,
      vol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step5(
      K: BigNumberish,
      input: BigNumberish,
      invariantLast: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testStep3(
      reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testStep4(
      reserve: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testStep5(
      reserve: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      precStable: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    step0(strike: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    step1(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step2(
      reserveRisky: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step3(reserve: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    step4(
      phi: BigNumberish,
      vol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step5(
      K: BigNumberish,
      input: BigNumberish,
      invariantLast: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testStep3(
      reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testStep4(
      reserve: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testStep5(
      reserve: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      precStable: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaleFactorStable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    step0(
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step1(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step2(
      reserveRisky: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step3(
      reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step4(
      phi: BigNumberish,
      vol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step5(
      K: BigNumberish,
      input: BigNumberish,
      invariantLast: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testStep3(
      reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testStep4(
      reserve: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testStep5(
      reserve: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
