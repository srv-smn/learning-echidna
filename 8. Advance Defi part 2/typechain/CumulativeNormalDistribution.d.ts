/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CumulativeNormalDistributionInterface extends ethers.utils.Interface {
  functions: {
    "C0()": FunctionFragment;
    "C0_D()": FunctionFragment;
    "C1()": FunctionFragment;
    "C1_D()": FunctionFragment;
    "C2()": FunctionFragment;
    "C2_D()": FunctionFragment;
    "C3()": FunctionFragment;
    "CDF0()": FunctionFragment;
    "CDF1()": FunctionFragment;
    "CDF2()": FunctionFragment;
    "CDF3()": FunctionFragment;
    "CDF4()": FunctionFragment;
    "CDF5()": FunctionFragment;
    "D0()": FunctionFragment;
    "D1()": FunctionFragment;
    "HALF_INT()": FunctionFragment;
    "HIGH_TAIL()": FunctionFragment;
    "INVERSE0()": FunctionFragment;
    "INVERSE1()": FunctionFragment;
    "INVERSE2()": FunctionFragment;
    "INVERSE3()": FunctionFragment;
    "INVERSE4()": FunctionFragment;
    "LOW_TAIL()": FunctionFragment;
    "ONE_INT()": FunctionFragment;
    "TWO_INT()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "C0", values?: undefined): string;
  encodeFunctionData(functionFragment: "C0_D", values?: undefined): string;
  encodeFunctionData(functionFragment: "C1", values?: undefined): string;
  encodeFunctionData(functionFragment: "C1_D", values?: undefined): string;
  encodeFunctionData(functionFragment: "C2", values?: undefined): string;
  encodeFunctionData(functionFragment: "C2_D", values?: undefined): string;
  encodeFunctionData(functionFragment: "C3", values?: undefined): string;
  encodeFunctionData(functionFragment: "CDF0", values?: undefined): string;
  encodeFunctionData(functionFragment: "CDF1", values?: undefined): string;
  encodeFunctionData(functionFragment: "CDF2", values?: undefined): string;
  encodeFunctionData(functionFragment: "CDF3", values?: undefined): string;
  encodeFunctionData(functionFragment: "CDF4", values?: undefined): string;
  encodeFunctionData(functionFragment: "CDF5", values?: undefined): string;
  encodeFunctionData(functionFragment: "D0", values?: undefined): string;
  encodeFunctionData(functionFragment: "D1", values?: undefined): string;
  encodeFunctionData(functionFragment: "HALF_INT", values?: undefined): string;
  encodeFunctionData(functionFragment: "HIGH_TAIL", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVERSE0", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVERSE1", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVERSE2", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVERSE3", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVERSE4", values?: undefined): string;
  encodeFunctionData(functionFragment: "LOW_TAIL", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_INT", values?: undefined): string;
  encodeFunctionData(functionFragment: "TWO_INT", values?: undefined): string;

  decodeFunctionResult(functionFragment: "C0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C0_D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C1_D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C2_D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CDF0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CDF1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CDF2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CDF3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CDF4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CDF5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "D0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "D1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HALF_INT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HIGH_TAIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVERSE0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVERSE1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVERSE2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVERSE3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVERSE4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOW_TAIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_INT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TWO_INT", data: BytesLike): Result;

  events: {};
}

export class CumulativeNormalDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CumulativeNormalDistributionInterface;

  functions: {
    C0(overrides?: CallOverrides): Promise<[BigNumber]>;

    C0_D(overrides?: CallOverrides): Promise<[BigNumber]>;

    C1(overrides?: CallOverrides): Promise<[BigNumber]>;

    C1_D(overrides?: CallOverrides): Promise<[BigNumber]>;

    C2(overrides?: CallOverrides): Promise<[BigNumber]>;

    C2_D(overrides?: CallOverrides): Promise<[BigNumber]>;

    C3(overrides?: CallOverrides): Promise<[BigNumber]>;

    CDF0(overrides?: CallOverrides): Promise<[BigNumber]>;

    CDF1(overrides?: CallOverrides): Promise<[BigNumber]>;

    CDF2(overrides?: CallOverrides): Promise<[BigNumber]>;

    CDF3(overrides?: CallOverrides): Promise<[BigNumber]>;

    CDF4(overrides?: CallOverrides): Promise<[BigNumber]>;

    CDF5(overrides?: CallOverrides): Promise<[BigNumber]>;

    D0(overrides?: CallOverrides): Promise<[BigNumber]>;

    D1(overrides?: CallOverrides): Promise<[BigNumber]>;

    HALF_INT(overrides?: CallOverrides): Promise<[BigNumber]>;

    HIGH_TAIL(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVERSE0(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVERSE1(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVERSE2(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVERSE3(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVERSE4(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOW_TAIL(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_INT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWO_INT(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  C0(overrides?: CallOverrides): Promise<BigNumber>;

  C0_D(overrides?: CallOverrides): Promise<BigNumber>;

  C1(overrides?: CallOverrides): Promise<BigNumber>;

  C1_D(overrides?: CallOverrides): Promise<BigNumber>;

  C2(overrides?: CallOverrides): Promise<BigNumber>;

  C2_D(overrides?: CallOverrides): Promise<BigNumber>;

  C3(overrides?: CallOverrides): Promise<BigNumber>;

  CDF0(overrides?: CallOverrides): Promise<BigNumber>;

  CDF1(overrides?: CallOverrides): Promise<BigNumber>;

  CDF2(overrides?: CallOverrides): Promise<BigNumber>;

  CDF3(overrides?: CallOverrides): Promise<BigNumber>;

  CDF4(overrides?: CallOverrides): Promise<BigNumber>;

  CDF5(overrides?: CallOverrides): Promise<BigNumber>;

  D0(overrides?: CallOverrides): Promise<BigNumber>;

  D1(overrides?: CallOverrides): Promise<BigNumber>;

  HALF_INT(overrides?: CallOverrides): Promise<BigNumber>;

  HIGH_TAIL(overrides?: CallOverrides): Promise<BigNumber>;

  INVERSE0(overrides?: CallOverrides): Promise<BigNumber>;

  INVERSE1(overrides?: CallOverrides): Promise<BigNumber>;

  INVERSE2(overrides?: CallOverrides): Promise<BigNumber>;

  INVERSE3(overrides?: CallOverrides): Promise<BigNumber>;

  INVERSE4(overrides?: CallOverrides): Promise<BigNumber>;

  LOW_TAIL(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_INT(overrides?: CallOverrides): Promise<BigNumber>;

  TWO_INT(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    C0(overrides?: CallOverrides): Promise<BigNumber>;

    C0_D(overrides?: CallOverrides): Promise<BigNumber>;

    C1(overrides?: CallOverrides): Promise<BigNumber>;

    C1_D(overrides?: CallOverrides): Promise<BigNumber>;

    C2(overrides?: CallOverrides): Promise<BigNumber>;

    C2_D(overrides?: CallOverrides): Promise<BigNumber>;

    C3(overrides?: CallOverrides): Promise<BigNumber>;

    CDF0(overrides?: CallOverrides): Promise<BigNumber>;

    CDF1(overrides?: CallOverrides): Promise<BigNumber>;

    CDF2(overrides?: CallOverrides): Promise<BigNumber>;

    CDF3(overrides?: CallOverrides): Promise<BigNumber>;

    CDF4(overrides?: CallOverrides): Promise<BigNumber>;

    CDF5(overrides?: CallOverrides): Promise<BigNumber>;

    D0(overrides?: CallOverrides): Promise<BigNumber>;

    D1(overrides?: CallOverrides): Promise<BigNumber>;

    HALF_INT(overrides?: CallOverrides): Promise<BigNumber>;

    HIGH_TAIL(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE0(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE1(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE2(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE3(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE4(overrides?: CallOverrides): Promise<BigNumber>;

    LOW_TAIL(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_INT(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_INT(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    C0(overrides?: CallOverrides): Promise<BigNumber>;

    C0_D(overrides?: CallOverrides): Promise<BigNumber>;

    C1(overrides?: CallOverrides): Promise<BigNumber>;

    C1_D(overrides?: CallOverrides): Promise<BigNumber>;

    C2(overrides?: CallOverrides): Promise<BigNumber>;

    C2_D(overrides?: CallOverrides): Promise<BigNumber>;

    C3(overrides?: CallOverrides): Promise<BigNumber>;

    CDF0(overrides?: CallOverrides): Promise<BigNumber>;

    CDF1(overrides?: CallOverrides): Promise<BigNumber>;

    CDF2(overrides?: CallOverrides): Promise<BigNumber>;

    CDF3(overrides?: CallOverrides): Promise<BigNumber>;

    CDF4(overrides?: CallOverrides): Promise<BigNumber>;

    CDF5(overrides?: CallOverrides): Promise<BigNumber>;

    D0(overrides?: CallOverrides): Promise<BigNumber>;

    D1(overrides?: CallOverrides): Promise<BigNumber>;

    HALF_INT(overrides?: CallOverrides): Promise<BigNumber>;

    HIGH_TAIL(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE0(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE1(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE2(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE3(overrides?: CallOverrides): Promise<BigNumber>;

    INVERSE4(overrides?: CallOverrides): Promise<BigNumber>;

    LOW_TAIL(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_INT(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_INT(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    C0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C0_D(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C1_D(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C2_D(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CDF0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CDF1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CDF2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CDF3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CDF4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CDF5(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    D0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    D1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HALF_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HIGH_TAIL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVERSE0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVERSE1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVERSE2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVERSE3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVERSE4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOW_TAIL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWO_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
