/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestReserveInterface extends ethers.utils.Interface {
  functions: {
    "_blockTimestamp()": FunctionFragment;
    "beforeEach(string,uint256,uint256,uint256)": FunctionFragment;
    "res()": FunctionFragment;
    "reserveId()": FunctionFragment;
    "reserves(bytes32)": FunctionFragment;
    "shouldAllocate(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "shouldRemove(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "shouldSwap(bytes32,bool,uint256,uint256)": FunctionFragment;
    "shouldUpdate(bytes32)": FunctionFragment;
    "step(uint256)": FunctionFragment;
    "timestamp()": FunctionFragment;
    "update(bytes32,uint256,uint256,uint256,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_blockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beforeEach",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "res", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserveId", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserves", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "shouldAllocate",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRemove",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldSwap",
    values: [BytesLike, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "step", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_blockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeEach", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "res", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldAllocate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shouldSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class TestReserve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestReserveInterface;

  functions: {
    _blockTimestamp(
      overrides?: CallOverrides
    ): Promise<[number] & { blockTimestamp: number }>;

    beforeEach(
      name: string,
      timestamp_: BigNumberish,
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    res(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          reserveRisky: BigNumber;
          reserveStable: BigNumber;
          liquidity: BigNumber;
          blockTimestamp: number;
          cumulativeRisky: BigNumber;
          cumulativeStable: BigNumber;
          cumulativeLiquidity: BigNumber;
        }
      ]
    >;

    reserveId(overrides?: CallOverrides): Promise<[string]>;

    reserves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    shouldAllocate(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldRemove(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldSwap(
      resId: BytesLike,
      addXRemoveY: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldUpdate(
      resId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    step(
      timestep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    update(
      resId: BytesLike,
      risky: BigNumberish,
      stable: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _blockTimestamp(overrides?: CallOverrides): Promise<number>;

  beforeEach(
    name: string,
    timestamp_: BigNumberish,
    reserveRisky: BigNumberish,
    reserveStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  res(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reserveRisky: BigNumber;
      reserveStable: BigNumber;
      liquidity: BigNumber;
      blockTimestamp: number;
      cumulativeRisky: BigNumber;
      cumulativeStable: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  reserveId(overrides?: CallOverrides): Promise<string>;

  reserves(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reserveRisky: BigNumber;
      reserveStable: BigNumber;
      liquidity: BigNumber;
      blockTimestamp: number;
      cumulativeRisky: BigNumber;
      cumulativeStable: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  shouldAllocate(
    resId: BytesLike,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    delLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldRemove(
    resId: BytesLike,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    delLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldSwap(
    resId: BytesLike,
    addXRemoveY: boolean,
    deltaIn: BigNumberish,
    deltaOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldUpdate(
    resId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  step(
    timestep: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  update(
    resId: BytesLike,
    risky: BigNumberish,
    stable: BigNumberish,
    liquidity: BigNumberish,
    blockTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _blockTimestamp(overrides?: CallOverrides): Promise<number>;

    beforeEach(
      name: string,
      timestamp_: BigNumberish,
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    res(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    reserveId(overrides?: CallOverrides): Promise<string>;

    reserves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    shouldAllocate(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    shouldRemove(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    shouldSwap(
      resId: BytesLike,
      addXRemoveY: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    shouldUpdate(
      resId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    step(timestep: BigNumberish, overrides?: CallOverrides): Promise<void>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      resId: BytesLike,
      risky: BigNumberish,
      stable: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    _blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    beforeEach(
      name: string,
      timestamp_: BigNumberish,
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    res(overrides?: CallOverrides): Promise<BigNumber>;

    reserveId(overrides?: CallOverrides): Promise<BigNumber>;

    reserves(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    shouldAllocate(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldRemove(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldSwap(
      resId: BytesLike,
      addXRemoveY: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldUpdate(
      resId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    step(
      timestep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      resId: BytesLike,
      risky: BigNumberish,
      stable: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _blockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beforeEach(
      name: string,
      timestamp_: BigNumberish,
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    res(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldAllocate(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldRemove(
      resId: BytesLike,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldSwap(
      resId: BytesLike,
      addXRemoveY: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldUpdate(
      resId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    step(
      timestep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      resId: BytesLike,
      risky: BigNumberish,
      stable: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
