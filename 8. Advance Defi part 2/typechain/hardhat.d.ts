/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "EchidnaE2E",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EchidnaE2E__factory>;
    getContractFactory(
      name: "EchidnaPrimitiveEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EchidnaPrimitiveEngine__factory>;
    getContractFactory(
      name: "CashManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CashManager__factory>;
    getContractFactory(
      name: "EchidnaPrimitiveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EchidnaPrimitiveManager__factory>;
    getContractFactory(
      name: "EngineAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EngineAddress__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Permit__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ICashManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICashManager__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Permit__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20PermitAllowed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitAllowed__factory>;
    getContractFactory(
      name: "IManagerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IManagerBase__factory>;
    getContractFactory(
      name: "IMarginManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarginManager__factory>;
    getContractFactory(
      name: "IMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticall__factory>;
    getContractFactory(
      name: "IPositionDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionDescriptor__factory>;
    getContractFactory(
      name: "IPrimitiveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveManager__factory>;
    getContractFactory(
      name: "ISelfPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISelfPermit__factory>;
    getContractFactory(
      name: "ISwapManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapManager__factory>;
    getContractFactory(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>;
    getContractFactory(
      name: "ManagerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerBase__factory>;
    getContractFactory(
      name: "MarginManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarginManager__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "PositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionManager__factory>;
    getContractFactory(
      name: "Reentrancy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reentrancy__factory>;
    getContractFactory(
      name: "SelfPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfPermit__factory>;
    getContractFactory(
      name: "SwapManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapManager__factory>;
    getContractFactory(
      name: "TransferHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferHelper__factory>;
    getContractFactory(
      name: "IPrimitiveCreateCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveCreateCallback__factory>;
    getContractFactory(
      name: "IPrimitiveDepositCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveDepositCallback__factory>;
    getContractFactory(
      name: "IPrimitiveLiquidityCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveLiquidityCallback__factory>;
    getContractFactory(
      name: "IPrimitiveSwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveSwapCallback__factory>;
    getContractFactory(
      name: "IPrimitiveEngineActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveEngineActions__factory>;
    getContractFactory(
      name: "IPrimitiveEngineErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveEngineErrors__factory>;
    getContractFactory(
      name: "IPrimitiveEngineEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveEngineEvents__factory>;
    getContractFactory(
      name: "IPrimitiveEngineView",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveEngineView__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IPrimitiveEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveEngine__factory>;
    getContractFactory(
      name: "IPrimitiveFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimitiveFactory__factory>;
    getContractFactory(
      name: "CumulativeNormalDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CumulativeNormalDistribution__factory>;
    getContractFactory(
      name: "PrimitiveEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimitiveEngine__factory>;
    getContractFactory(
      name: "PrimitiveFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimitiveFactory__factory>;
    getContractFactory(
      name: "Scenarios",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Scenarios__factory>;
    getContractFactory(
      name: "TestAllocateCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAllocateCallback__factory>;
    getContractFactory(
      name: "TestCreateCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCreateCallback__factory>;
    getContractFactory(
      name: "TestDepositCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDepositCallback__factory>;
    getContractFactory(
      name: "TestSwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSwapCallback__factory>;
    getContractFactory(
      name: "EchidnaMockEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EchidnaMockEngine__factory>;
    getContractFactory(
      name: "MockEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockEngine__factory>;
    getContractFactory(
      name: "FactoryDeploy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryDeploy__factory>;
    getContractFactory(
      name: "MockFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFactory__factory>;
    getContractFactory(
      name: "TestCalcInvariant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCalcInvariant__factory>;
    getContractFactory(
      name: "TestCumulativeNormalDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCumulativeNormalDistribution__factory>;
    getContractFactory(
      name: "TestGetStableGivenRisky",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestGetStableGivenRisky__factory>;
    getContractFactory(
      name: "TestMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestMargin__factory>;
    getContractFactory(
      name: "TestReplicationMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestReplicationMath__factory>;
    getContractFactory(
      name: "TestReserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestReserve__factory>;
    getContractFactory(
      name: "TestBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBase__factory>;
    getContractFactory(
      name: "TestRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRouter__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;

    getContractAt(
      name: "EchidnaE2E",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EchidnaE2E>;
    getContractAt(
      name: "EchidnaPrimitiveEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EchidnaPrimitiveEngine>;
    getContractAt(
      name: "CashManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CashManager>;
    getContractAt(
      name: "EchidnaPrimitiveManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EchidnaPrimitiveManager>;
    getContractAt(
      name: "EngineAddress",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EngineAddress>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Permit>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ICashManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICashManager>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Permit>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20PermitAllowed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitAllowed>;
    getContractAt(
      name: "IManagerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IManagerBase>;
    getContractAt(
      name: "IMarginManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarginManager>;
    getContractAt(
      name: "IMulticall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticall>;
    getContractAt(
      name: "IPositionDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionDescriptor>;
    getContractAt(
      name: "IPrimitiveManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveManager>;
    getContractAt(
      name: "ISelfPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISelfPermit>;
    getContractAt(
      name: "ISwapManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapManager>;
    getContractAt(
      name: "IWETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>;
    getContractAt(
      name: "ManagerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerBase>;
    getContractAt(
      name: "MarginManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarginManager>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "PositionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionManager>;
    getContractAt(
      name: "Reentrancy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Reentrancy>;
    getContractAt(
      name: "SelfPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfPermit>;
    getContractAt(
      name: "SwapManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapManager>;
    getContractAt(
      name: "TransferHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferHelper>;
    getContractAt(
      name: "IPrimitiveCreateCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveCreateCallback>;
    getContractAt(
      name: "IPrimitiveDepositCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveDepositCallback>;
    getContractAt(
      name: "IPrimitiveLiquidityCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveLiquidityCallback>;
    getContractAt(
      name: "IPrimitiveSwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveSwapCallback>;
    getContractAt(
      name: "IPrimitiveEngineActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveEngineActions>;
    getContractAt(
      name: "IPrimitiveEngineErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveEngineErrors>;
    getContractAt(
      name: "IPrimitiveEngineEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveEngineEvents>;
    getContractAt(
      name: "IPrimitiveEngineView",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveEngineView>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IPrimitiveEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveEngine>;
    getContractAt(
      name: "IPrimitiveFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimitiveFactory>;
    getContractAt(
      name: "CumulativeNormalDistribution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CumulativeNormalDistribution>;
    getContractAt(
      name: "PrimitiveEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimitiveEngine>;
    getContractAt(
      name: "PrimitiveFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimitiveFactory>;
    getContractAt(
      name: "Scenarios",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Scenarios>;
    getContractAt(
      name: "TestAllocateCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAllocateCallback>;
    getContractAt(
      name: "TestCreateCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCreateCallback>;
    getContractAt(
      name: "TestDepositCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDepositCallback>;
    getContractAt(
      name: "TestSwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSwapCallback>;
    getContractAt(
      name: "EchidnaMockEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EchidnaMockEngine>;
    getContractAt(
      name: "MockEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockEngine>;
    getContractAt(
      name: "FactoryDeploy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryDeploy>;
    getContractAt(
      name: "MockFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFactory>;
    getContractAt(
      name: "TestCalcInvariant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCalcInvariant>;
    getContractAt(
      name: "TestCumulativeNormalDistribution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCumulativeNormalDistribution>;
    getContractAt(
      name: "TestGetStableGivenRisky",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestGetStableGivenRisky>;
    getContractAt(
      name: "TestMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestMargin>;
    getContractAt(
      name: "TestReplicationMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestReplicationMath>;
    getContractAt(
      name: "TestReserve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestReserve>;
    getContractAt(
      name: "TestBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBase>;
    getContractAt(
      name: "TestRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRouter>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
