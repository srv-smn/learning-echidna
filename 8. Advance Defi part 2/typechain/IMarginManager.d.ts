/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMarginManagerInterface extends ethers.utils.Interface {
  functions: {
    "deposit(address,address,address,uint256,uint256)": FunctionFragment;
    "depositCallback(uint256,uint256,bytes)": FunctionFragment;
    "margins(address,address)": FunctionFragment;
    "withdraw(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "margins",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "margins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,address,address,address,address,uint256,uint256)": EventFragment;
    "Withdraw(address,address,address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber] & {
    payer: string;
    recipient: string;
    engine: string;
    risky: string;
    stable: string;
    delRisky: BigNumber;
    delStable: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber] & {
    payer: string;
    recipient: string;
    engine: string;
    risky: string;
    stable: string;
    delRisky: BigNumber;
    delStable: BigNumber;
  }
>;

export class IMarginManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMarginManagerInterface;

  functions: {
    deposit(
      recipient: string,
      risky: string,
      stable: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    margins(
      account: string,
      engine: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    withdraw(
      recipient: string,
      engine: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    recipient: string,
    risky: string,
    stable: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  margins(
    account: string,
    engine: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  withdraw(
    recipient: string,
    engine: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      recipient: string,
      risky: string,
      stable: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    margins(
      account: string,
      engine: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    withdraw(
      recipient: string,
      engine: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,address,address,address,address,uint256,uint256)"(
      payer?: string | null,
      recipient?: string | null,
      engine?: string | null,
      risky?: null,
      stable?: null,
      delRisky?: null,
      delStable?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber, BigNumber],
      {
        payer: string;
        recipient: string;
        engine: string;
        risky: string;
        stable: string;
        delRisky: BigNumber;
        delStable: BigNumber;
      }
    >;

    Deposit(
      payer?: string | null,
      recipient?: string | null,
      engine?: string | null,
      risky?: null,
      stable?: null,
      delRisky?: null,
      delStable?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber, BigNumber],
      {
        payer: string;
        recipient: string;
        engine: string;
        risky: string;
        stable: string;
        delRisky: BigNumber;
        delStable: BigNumber;
      }
    >;

    "Withdraw(address,address,address,address,address,uint256,uint256)"(
      payer?: string | null,
      recipient?: string | null,
      engine?: string | null,
      risky?: null,
      stable?: null,
      delRisky?: null,
      delStable?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber, BigNumber],
      {
        payer: string;
        recipient: string;
        engine: string;
        risky: string;
        stable: string;
        delRisky: BigNumber;
        delStable: BigNumber;
      }
    >;

    Withdraw(
      payer?: string | null,
      recipient?: string | null,
      engine?: string | null,
      risky?: null,
      stable?: null,
      delRisky?: null,
      delStable?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber, BigNumber],
      {
        payer: string;
        recipient: string;
        engine: string;
        risky: string;
        stable: string;
        delRisky: BigNumber;
        delStable: BigNumber;
      }
    >;
  };

  estimateGas: {
    deposit(
      recipient: string,
      risky: string,
      stable: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    margins(
      account: string,
      engine: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      engine: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      recipient: string,
      risky: string,
      stable: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    margins(
      account: string,
      engine: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      engine: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
