/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestCalcInvariantInterface extends ethers.utils.Interface {
  functions: {
    "calcInvariantRisky(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcInvariantStable(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "scaleFactorRisky()": FunctionFragment;
    "scaleFactorStable()": FunctionFragment;
    "set(uint256,uint256)": FunctionFragment;
    "step0(uint256,uint256,uint256,uint256)": FunctionFragment;
    "step1(uint256,int128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcInvariantRisky",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInvariantStable",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactorRisky",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactorStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "step0",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "step1",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcInvariantRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcInvariantStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step1", data: BytesLike): Result;

  events: {};
}

export class TestCalcInvariant extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestCalcInvariantInterface;

  functions: {
    calcInvariantRisky(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invariant: BigNumber }>;

    calcInvariantStable(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invariant: BigNumber }>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaleFactorStable(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    step0(
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserve2: BigNumber }>;

    step1(
      reserveStable: BigNumberish,
      reserve2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invariant: BigNumber }>;
  };

  calcInvariantRisky(
    reserveRisky: BigNumberish,
    reserveStable: BigNumberish,
    strike: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcInvariantStable(
    reserveRisky: BigNumberish,
    reserveStable: BigNumberish,
    strike: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

  scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    prec0: BigNumberish,
    prec1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  step0(
    reserveRisky: BigNumberish,
    strike: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  step1(
    reserveStable: BigNumberish,
    reserve2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calcInvariantRisky(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcInvariantStable(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    step0(
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step1(
      reserveStable: BigNumberish,
      reserve2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calcInvariantRisky(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcInvariantStable(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    step0(
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step1(
      reserveStable: BigNumberish,
      reserve2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcInvariantRisky(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcInvariantStable(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaleFactorStable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    step0(
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step1(
      reserveStable: BigNumberish,
      reserve2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
