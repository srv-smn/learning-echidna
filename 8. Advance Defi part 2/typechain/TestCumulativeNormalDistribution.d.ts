/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestCumulativeNormalDistributionInterface
  extends ethers.utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "cdf(uint256)": FunctionFragment;
    "cdfX64(int128)": FunctionFragment;
    "icdf(uint256)": FunctionFragment;
    "inverseCDF(uint256)": FunctionFragment;
    "inverseCDFHighTail()": FunctionFragment;
    "inverseCDFLowTail()": FunctionFragment;
    "signedCDF(uint256)": FunctionFragment;
    "signedInverseCDF(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "cdf", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cdfX64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "icdf", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "inverseCDF",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inverseCDFHighTail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inverseCDFLowTail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signedCDF",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signedInverseCDF",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cdf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cdfX64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "icdf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inverseCDF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inverseCDFHighTail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inverseCDFLowTail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signedCDF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedInverseCDF",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestCumulativeNormalDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestCumulativeNormalDistributionInterface;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    cdf(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    cdfX64(z: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    icdf(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    inverseCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    inverseCDFHighTail(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    inverseCDFLowTail(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    signedCDF(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    signedInverseCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  cdf(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  cdfX64(z: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  icdf(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  inverseCDF(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  inverseCDFHighTail(overrides?: CallOverrides): Promise<BigNumber>;

  inverseCDFLowTail(overrides?: CallOverrides): Promise<BigNumber>;

  signedCDF(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  signedInverseCDF(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    cdf(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cdfX64(z: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    icdf(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    inverseCDF(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    inverseCDFHighTail(overrides?: CallOverrides): Promise<BigNumber>;

    inverseCDFLowTail(overrides?: CallOverrides): Promise<BigNumber>;

    signedCDF(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    signedInverseCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    cdf(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cdfX64(z: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    icdf(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    inverseCDF(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    inverseCDFHighTail(overrides?: CallOverrides): Promise<BigNumber>;

    inverseCDFLowTail(overrides?: CallOverrides): Promise<BigNumber>;

    signedCDF(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    signedInverseCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cdf(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cdfX64(
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    icdf(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inverseCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inverseCDFHighTail(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inverseCDFLowTail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signedCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signedInverseCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
