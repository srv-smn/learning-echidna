/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EchidnaE2EInterface extends ethers.utils.Interface {
  functions: {
    "check_precision_and_liquidity()": FunctionFragment;
    "check_proper_deployment_of_engine()": FunctionFragment;
    "depositCallback(uint256,uint256,bytes)": FunctionFragment;
    "deposit_with_safe_range(address,uint256,uint256)": FunctionFragment;
    "withdraw_with_safe_range(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "check_precision_and_liquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "check_proper_deployment_of_engine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_with_safe_range",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_with_safe_range",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "check_precision_and_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check_proper_deployment_of_engine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit_with_safe_range",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_with_safe_range",
    data: BytesLike
  ): Result;

  events: {
    "AssertionFailed(string,uint256,uint256)": EventFragment;
    "LogBytes(string,bytes)": EventFragment;
    "LogUint256(string,uint256)": EventFragment;
    "WithdrawFailed(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssertionFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUint256"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFailed"): EventFragment;
}

export type AssertionFailed_string_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber] & {
    msg: string;
    expected: BigNumber;
    actual: BigNumber;
  }
>;

export type AssertionFailed_string_uint256_Event = TypedEvent<
  [string, BigNumber] & { msg: string; number: BigNumber }
>;

export type LogBytesEvent = TypedEvent<
  [string, string] & { msg: string; data: string }
>;

export type LogUint256Event = TypedEvent<
  [string, BigNumber] & { msg: string; value: BigNumber }
>;

export type WithdrawFailedEvent = TypedEvent<[string] & { msg: string }>;

export class EchidnaE2E extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EchidnaE2EInterface;

  functions: {
    check_precision_and_liquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    check_proper_deployment_of_engine(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  check_precision_and_liquidity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  check_proper_deployment_of_engine(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit_with_safe_range(
    recipient: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw_with_safe_range(
    recipient: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    check_precision_and_liquidity(overrides?: CallOverrides): Promise<void>;

    check_proper_deployment_of_engine(overrides?: CallOverrides): Promise<void>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssertionFailed(string,uint256,uint256)"(
      msg?: null,
      expected?: null,
      actual?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { msg: string; expected: BigNumber; actual: BigNumber }
    >;

    "AssertionFailed(string,uint256)"(
      msg?: null,
      number?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { msg: string; number: BigNumber }
    >;

    "LogBytes(string,bytes)"(
      msg?: null,
      data?: null
    ): TypedEventFilter<[string, string], { msg: string; data: string }>;

    LogBytes(
      msg?: null,
      data?: null
    ): TypedEventFilter<[string, string], { msg: string; data: string }>;

    "LogUint256(string,uint256)"(
      msg?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { msg: string; value: BigNumber }>;

    LogUint256(
      msg?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { msg: string; value: BigNumber }>;

    "WithdrawFailed(string)"(
      msg?: null
    ): TypedEventFilter<[string], { msg: string }>;

    WithdrawFailed(msg?: null): TypedEventFilter<[string], { msg: string }>;
  };

  estimateGas: {
    check_precision_and_liquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    check_proper_deployment_of_engine(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    check_precision_and_liquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    check_proper_deployment_of_engine(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_with_safe_range(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
