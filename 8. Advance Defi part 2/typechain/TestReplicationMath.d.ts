/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestReplicationMathInterface extends ethers.utils.Interface {
  functions: {
    "PERCENTAGE()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "YEAR()": FunctionFragment;
    "calcInvariant(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getProportionalVolatility(uint256,uint256)": FunctionFragment;
    "getStableGivenRisky(int128,uint256,uint256,uint256,uint256)": FunctionFragment;
    "scaleFactorRisky()": FunctionFragment;
    "scaleFactorStable()": FunctionFragment;
    "set(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "YEAR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcInvariant",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProportionalVolatility",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableGivenRisky",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactorRisky",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactorStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PERCENTAGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YEAR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInvariant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProportionalVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableGivenRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;

  events: {};
}

export class TestReplicationMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestReplicationMathInterface;

  functions: {
    PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcInvariant(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invariant: BigNumber }>;

    getProportionalVolatility(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vol: BigNumber }>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveStable: BigNumber }>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaleFactorStable(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  calcInvariant(
    reserveRisky: BigNumberish,
    reserveStable: BigNumberish,
    strike: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProportionalVolatility(
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStableGivenRisky(
    invariantLast: BigNumberish,
    reserveRisky: BigNumberish,
    strike: BigNumberish,
    sigma: BigNumberish,
    tau: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

  scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    prec0: BigNumberish,
    prec1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    calcInvariant(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProportionalVolatility(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    calcInvariant(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProportionalVolatility(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcInvariant(
      reserveRisky: BigNumberish,
      reserveStable: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProportionalVolatility(
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableGivenRisky(
      invariantLast: BigNumberish,
      reserveRisky: BigNumberish,
      strike: BigNumberish,
      sigma: BigNumberish,
      tau: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaleFactorStable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      prec0: BigNumberish,
      prec1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
