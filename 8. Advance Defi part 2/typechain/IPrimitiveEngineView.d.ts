/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPrimitiveEngineViewInterface extends ethers.utils.Interface {
  functions: {
    "BUFFER()": FunctionFragment;
    "MIN_LIQUIDITY()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "calibrations(bytes32)": FunctionFragment;
    "factory()": FunctionFragment;
    "invariantOf(bytes32)": FunctionFragment;
    "liquidity(address,bytes32)": FunctionFragment;
    "margins(address)": FunctionFragment;
    "reserves(bytes32)": FunctionFragment;
    "risky()": FunctionFragment;
    "scaleFactorRisky()": FunctionFragment;
    "scaleFactorStable()": FunctionFragment;
    "stable()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BUFFER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calibrations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invariantOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "margins", values: [string]): string;
  encodeFunctionData(functionFragment: "reserves", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "risky", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "scaleFactorRisky",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactorStable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BUFFER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calibrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invariantOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "margins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "risky", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactorStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;

  events: {};
}

export class IPrimitiveEngineView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPrimitiveEngineViewInterface;

  functions: {
    BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    calibrations(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        strike: BigNumber;
        sigma: number;
        maturity: number;
        lastTimestamp: number;
        gamma: number;
      }
    >;

    factory(overrides?: CallOverrides): Promise<[string]>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invariant: BigNumber }>;

    liquidity(
      account: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    margins(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    reserves(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    risky(overrides?: CallOverrides): Promise<[string]>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaleFactorStable(overrides?: CallOverrides): Promise<[BigNumber]>;

    stable(overrides?: CallOverrides): Promise<[string]>;
  };

  BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  calibrations(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number] & {
      strike: BigNumber;
      sigma: number;
      maturity: number;
      lastTimestamp: number;
      gamma: number;
    }
  >;

  factory(overrides?: CallOverrides): Promise<string>;

  invariantOf(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  liquidity(
    account: string,
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  margins(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  reserves(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reserveRisky: BigNumber;
      reserveStable: BigNumber;
      liquidity: BigNumber;
      blockTimestamp: number;
      cumulativeRisky: BigNumber;
      cumulativeStable: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  risky(overrides?: CallOverrides): Promise<string>;

  scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

  scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

  stable(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    calibrations(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        strike: BigNumber;
        sigma: number;
        maturity: number;
        lastTimestamp: number;
        gamma: number;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidity(
      account: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    margins(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    reserves(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    risky(overrides?: CallOverrides): Promise<string>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    calibrations(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidity(
      account: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    margins(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    reserves(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    risky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactorStable(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BUFFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calibrations(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(
      account: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    margins(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserves(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    risky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaleFactorRisky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaleFactorStable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
