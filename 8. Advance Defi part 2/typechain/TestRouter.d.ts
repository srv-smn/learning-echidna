/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestRouterInterface extends ethers.utils.Interface {
  functions: {
    "allocate(bytes32,address,uint256,uint256,bytes)": FunctionFragment;
    "allocateCallback(uint256,uint256,bytes)": FunctionFragment;
    "allocateFromExternal(bytes32,address,uint256,uint256,bytes)": FunctionFragment;
    "allocateFromExternalNoRisky(bytes32,address,uint256,uint256,bytes)": FunctionFragment;
    "allocateFromExternalNoStable(bytes32,address,uint256,uint256,bytes)": FunctionFragment;
    "allocateFromExternalReentrancy(bytes32,address,uint256,uint256,bytes)": FunctionFragment;
    "allocateFromMargin(bytes32,address,uint256,uint256,bytes)": FunctionFragment;
    "caller()": FunctionFragment;
    "create(uint256,uint256,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "createCallback(uint256,uint256,bytes)": FunctionFragment;
    "deposit(address,uint256,uint256,bytes)": FunctionFragment;
    "depositCallback(uint256,uint256,bytes)": FunctionFragment;
    "depositFail(address,uint256,uint256,bytes)": FunctionFragment;
    "depositOnlyRisky(address,uint256,uint256,bytes)": FunctionFragment;
    "depositOnlyStable(address,uint256,uint256,bytes)": FunctionFragment;
    "depositReentrancy(address,uint256,uint256,bytes)": FunctionFragment;
    "engine()": FunctionFragment;
    "expect(string)": FunctionFragment;
    "expectedError()": FunctionFragment;
    "getCaller()": FunctionFragment;
    "getPosition(bytes32)": FunctionFragment;
    "getRiskyInGivenStableOut(bytes32,uint256)": FunctionFragment;
    "getRiskyOutGivenStableIn(bytes32,uint256)": FunctionFragment;
    "getStableInGivenRiskyOut(bytes32,uint256)": FunctionFragment;
    "getStableOutGivenRiskyIn(bytes32,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "remove(bytes32,uint256,bytes)": FunctionFragment;
    "removeToExternal(bytes32,uint256,bytes)": FunctionFragment;
    "removeToMargin(bytes32,uint256,bytes)": FunctionFragment;
    "risky()": FunctionFragment;
    "scenario()": FunctionFragment;
    "setEngine(address)": FunctionFragment;
    "stable()": FunctionFragment;
    "swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)": FunctionFragment;
    "swapCallback(uint256,uint256,bytes)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawToRecipient(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFromExternal",
    values: [BytesLike, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFromExternalNoRisky",
    values: [BytesLike, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFromExternalNoStable",
    values: [BytesLike, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFromExternalReentrancy",
    values: [BytesLike, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFromMargin",
    values: [BytesLike, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "caller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFail",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOnlyRisky",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOnlyStable",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReentrancy",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(functionFragment: "expect", values: [string]): string;
  encodeFunctionData(
    functionFragment: "expectedError",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCaller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskyInGivenStableOut",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskyOutGivenStableIn",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableInGivenRiskyOut",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableOutGivenRiskyIn",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToExternal",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToMargin",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "risky", values?: undefined): string;
  encodeFunctionData(functionFragment: "scenario", values?: undefined): string;
  encodeFunctionData(functionFragment: "setEngine", values: [string]): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      string,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToRecipient",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateFromExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateFromExternalNoRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateFromExternalNoStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateFromExternalReentrancy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateFromMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "caller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOnlyRisky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOnlyStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReentrancy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expectedError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCaller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskyInGivenStableOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskyOutGivenStableIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableInGivenRiskyOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableOutGivenRiskyIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "risky", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEngine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToRecipient",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestRouterInterface;

  functions: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateFromExternal(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateFromExternalNoRisky(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateFromExternalNoStable(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateFromExternalReentrancy(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateFromMargin(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    caller(overrides?: CallOverrides): Promise<[string]>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      gamma: BigNumberish,
      riskyPerLp: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFail(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositOnlyRisky(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositOnlyStable(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositReentrancy(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    expect(
      errorString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expectedError(overrides?: CallOverrides): Promise<[string]>;

    getCaller(overrides?: CallOverrides): Promise<[string]>;

    getPosition(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { posid: string }>;

    getRiskyInGivenStableOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRiskyOutGivenStableIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStableInGivenRiskyOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStableOutGivenRiskyIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeToExternal(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeToMargin(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    risky(overrides?: CallOverrides): Promise<[string]>;

    scenario(overrides?: CallOverrides): Promise<[number]>;

    setEngine(
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stable(overrides?: CallOverrides): Promise<[string]>;

    swap(
      recipient: string,
      pid: BytesLike,
      riskyForStable: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      fromMargin: boolean,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToRecipient(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocate(
    poolId: BytesLike,
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateFromExternal(
    poolId: BytesLike,
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateFromExternalNoRisky(
    poolId: BytesLike,
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateFromExternalNoStable(
    poolId: BytesLike,
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateFromExternalReentrancy(
    poolId: BytesLike,
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateFromMargin(
    poolId: BytesLike,
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  caller(overrides?: CallOverrides): Promise<string>;

  create(
    strike: BigNumberish,
    sigma: BigNumberish,
    maturity: BigNumberish,
    gamma: BigNumberish,
    riskyPerLp: BigNumberish,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCallback(
    dRisky: BigNumberish,
    dStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFail(
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositOnlyRisky(
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositOnlyStable(
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositReentrancy(
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  engine(overrides?: CallOverrides): Promise<string>;

  expect(
    errorString: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expectedError(overrides?: CallOverrides): Promise<string>;

  getCaller(overrides?: CallOverrides): Promise<string>;

  getPosition(poolId: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRiskyInGivenStableOut(
    poolId: BytesLike,
    deltaOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRiskyOutGivenStableIn(
    poolId: BytesLike,
    deltaIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStableInGivenRiskyOut(
    poolId: BytesLike,
    deltaOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStableOutGivenRiskyIn(
    poolId: BytesLike,
    deltaIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  remove(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeToExternal(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeToMargin(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  risky(overrides?: CallOverrides): Promise<string>;

  scenario(overrides?: CallOverrides): Promise<number>;

  setEngine(
    engine_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stable(overrides?: CallOverrides): Promise<string>;

  swap(
    recipient: string,
    pid: BytesLike,
    riskyForStable: boolean,
    deltaIn: BigNumberish,
    deltaOut: BigNumberish,
    fromMargin: boolean,
    toMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToRecipient(
    recipient: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFromExternal(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFromExternalNoRisky(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFromExternalNoStable(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFromExternalReentrancy(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFromMargin(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    caller(overrides?: CallOverrides): Promise<string>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      gamma: BigNumberish,
      riskyPerLp: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFail(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOnlyRisky(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOnlyStable(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReentrancy(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    engine(overrides?: CallOverrides): Promise<string>;

    expect(errorString: string, overrides?: CallOverrides): Promise<void>;

    expectedError(overrides?: CallOverrides): Promise<string>;

    getCaller(overrides?: CallOverrides): Promise<string>;

    getPosition(poolId: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRiskyInGivenStableOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskyOutGivenStableIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableInGivenRiskyOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableOutGivenRiskyIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToExternal(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToMargin(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    risky(overrides?: CallOverrides): Promise<string>;

    scenario(overrides?: CallOverrides): Promise<number>;

    setEngine(engine_: string, overrides?: CallOverrides): Promise<void>;

    stable(overrides?: CallOverrides): Promise<string>;

    swap(
      recipient: string,
      pid: BytesLike,
      riskyForStable: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      fromMargin: boolean,
      toMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToRecipient(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateFromExternal(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateFromExternalNoRisky(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateFromExternalNoStable(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateFromExternalReentrancy(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateFromMargin(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    caller(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      gamma: BigNumberish,
      riskyPerLp: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFail(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositOnlyRisky(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositOnlyStable(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositReentrancy(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    expect(
      errorString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expectedError(overrides?: CallOverrides): Promise<BigNumber>;

    getCaller(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskyInGivenStableOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskyOutGivenStableIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableInGivenRiskyOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStableOutGivenRiskyIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeToExternal(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeToMargin(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    risky(overrides?: CallOverrides): Promise<BigNumber>;

    scenario(overrides?: CallOverrides): Promise<BigNumber>;

    setEngine(
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      recipient: string,
      pid: BytesLike,
      riskyForStable: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      fromMargin: boolean,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToRecipient(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateFromExternal(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateFromExternalNoRisky(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateFromExternalNoStable(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateFromExternalReentrancy(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateFromMargin(
      poolId: BytesLike,
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    caller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      gamma: BigNumberish,
      riskyPerLp: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFail(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositOnlyRisky(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositOnlyStable(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositReentrancy(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expect(
      errorString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expectedError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskyInGivenStableOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskyOutGivenStableIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableInGivenRiskyOut(
      poolId: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableOutGivenRiskyIn(
      poolId: BytesLike,
      deltaIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeToExternal(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeToMargin(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    risky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scenario(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEngine(
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      recipient: string,
      pid: BytesLike,
      riskyForStable: boolean,
      deltaIn: BigNumberish,
      deltaOut: BigNumberish,
      fromMargin: boolean,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToRecipient(
      recipient: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
