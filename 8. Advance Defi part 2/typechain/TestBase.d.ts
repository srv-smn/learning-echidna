/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestBaseInterface extends ethers.utils.Interface {
  functions: {
    "allocateCallback(uint256,uint256,bytes)": FunctionFragment;
    "caller()": FunctionFragment;
    "createCallback(uint256,uint256,bytes)": FunctionFragment;
    "depositCallback(uint256,uint256,bytes)": FunctionFragment;
    "engine()": FunctionFragment;
    "getCaller()": FunctionFragment;
    "getPosition(bytes32)": FunctionFragment;
    "name()": FunctionFragment;
    "risky()": FunctionFragment;
    "scenario()": FunctionFragment;
    "setEngine(address)": FunctionFragment;
    "stable()": FunctionFragment;
    "swapCallback(uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocateCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "caller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCaller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "risky", values?: undefined): string;
  encodeFunctionData(functionFragment: "scenario", values?: undefined): string;
  encodeFunctionData(functionFragment: "setEngine", values: [string]): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "caller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCaller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "risky", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEngine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestBaseInterface;

  functions: {
    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    caller(overrides?: CallOverrides): Promise<[string]>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    getCaller(overrides?: CallOverrides): Promise<[string]>;

    getPosition(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { posid: string }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    risky(overrides?: CallOverrides): Promise<[string]>;

    scenario(overrides?: CallOverrides): Promise<[number]>;

    setEngine(
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stable(overrides?: CallOverrides): Promise<[string]>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocateCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  caller(overrides?: CallOverrides): Promise<string>;

  createCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCallback(
    dRisky: BigNumberish,
    dStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  engine(overrides?: CallOverrides): Promise<string>;

  getCaller(overrides?: CallOverrides): Promise<string>;

  getPosition(poolId: BytesLike, overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  risky(overrides?: CallOverrides): Promise<string>;

  scenario(overrides?: CallOverrides): Promise<number>;

  setEngine(
    engine_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stable(overrides?: CallOverrides): Promise<string>;

  swapCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    caller(overrides?: CallOverrides): Promise<string>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    engine(overrides?: CallOverrides): Promise<string>;

    getCaller(overrides?: CallOverrides): Promise<string>;

    getPosition(poolId: BytesLike, overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    risky(overrides?: CallOverrides): Promise<string>;

    scenario(overrides?: CallOverrides): Promise<number>;

    setEngine(engine_: string, overrides?: CallOverrides): Promise<void>;

    stable(overrides?: CallOverrides): Promise<string>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    caller(overrides?: CallOverrides): Promise<BigNumber>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    getCaller(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    risky(overrides?: CallOverrides): Promise<BigNumber>;

    scenario(overrides?: CallOverrides): Promise<BigNumber>;

    setEngine(
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    caller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCallback(
      dRisky: BigNumberish,
      dStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    risky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scenario(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEngine(
      engine_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
