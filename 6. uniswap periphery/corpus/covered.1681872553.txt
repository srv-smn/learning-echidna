/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/crytic/EchidnaUniV2Tester.sol
   1 |     | pragma solidity ^0.6.0;
   2 |     | import "./Setup.sol";
   3 | *r  | 
   4 |     | contract EchidnaUniV2Tester is Setup {
   5 |     |     using SafeMath for uint;
   6 |     |     event logUints(uint kBefore, uint kAfter);
   7 | *   |     function testProvideLiquidityInvariants(uint amount1, uint amount2) public {
   8 |     |         //PRECONDITIONS:
   9 | *   |         amount1 = _between(amount1, 1000, uint(-1));
  10 | *   |         amount2 = _between(amount2, 1000, uint(-1));
  11 | *   |         if(!complete) {
  12 | *   |             _init(amount1,amount2);
  13 |     |         }
  14 |     |         
  15 | *   |         uint pairBalanceBefore = testPair.balanceOf(address(user));
  16 |     |         
  17 | *   |         (uint reserve1Before, uint reserve2Before) = UniswapV2Library.getReserves(address(factory), address(testToken1), address(testToken2));
  18 |     |         
  19 | *   |         uint kBefore = reserve1Before * reserve2Before;
  20 |     |        
  21 |     |         //CALL:
  22 |     |         
  23 | *   |         (bool success, ) = user.proxy(address(router),abi.encodeWithSelector(router.addLiquidity.selector, address(testToken1), address(testToken2), amount1, amount2, 0, 0, address(user), uint(-1)));
  24 |     |         
  25 |     |         //POSTCONDITIONS
  26 |     |        
  27 | *   |         if (success) {
  28 | *   |             (uint reserve1After, uint reserve2After) = UniswapV2Library.getReserves(address(factory), address(testToken1), address(testToken2));
  29 | *   |             uint pairBalanceAfter = testPair.balanceOf(address(user));
  30 | *   |             uint kAfter = reserve1After*reserve2After;
  31 | *   |             assert(kBefore < kAfter);
  32 | *   |             assert(pairBalanceBefore < pairBalanceAfter);
  33 |     |         }
  34 |     |        
  35 |     |         
  36 |     |     }
  37 |     |    
  38 | *r  |     function testSwapTokens(uint swapAmountIn) public {
  39 |     |        //PRECONDITIONS:
  40 |     | 
  41 | *r  |        if(!complete) {
  42 | *r  |             _init(swapAmountIn,swapAmountIn);
  43 |     |         }
  44 |     |         
  45 | *r  |         address[] memory path = new address[](2);
  46 | *r  |         path[0] = address(testToken1);
  47 | *r  |         path[1] = address(testToken2);
  48 |     | 
  49 | *r  |         uint prevBal1 = UniswapV2ERC20(path[0]).balanceOf(address(user));
  50 | *r  |         uint prevBal2 = UniswapV2ERC20(path[1]).balanceOf(address(user));
  51 |     | 
  52 | *r  |         require(prevBal1 > 0);
  53 | *   |         swapAmountIn = _between(swapAmountIn, 1, prevBal1);
  54 | *   |         (uint reserve1Before, uint reserve2Before) = UniswapV2Library.getReserves(address(factory), address(testToken1), address(testToken2));
  55 | *   |         uint kBefore = reserve1Before * reserve2Before; 
  56 |     |         //CALL: 
  57 | *   |         (bool success, ) = user.proxy(address(router), abi.encodeWithSelector(router.swapExactTokensForTokens.selector, swapAmountIn,0,path,address(user),uint(-1)));
  58 |     |         //POSTCONDITIONS:
  59 |     |            
  60 | *   |         if(success) {
  61 | *   |             uint balance1After = UniswapV2ERC20(path[0]).balanceOf(address(user));
  62 | *   |             uint balance2After  = UniswapV2ERC20(path[1]).balanceOf(address(user));
  63 | *   |             (uint reserve1After, uint reserve2After) = UniswapV2Library.getReserves(address(factory), address(testToken1), address(testToken2));
  64 | *   |             uint kAfter = reserve1After*reserve2After;
  65 | *   |             emit logUints(kBefore, kAfter);
  66 | *   |             assert(kBefore < kAfter); 
  67 | *   |             assert(prevBal2 < balance2After);
  68 | *   |             assert(prevBal1 > balance1After);
  69 |     |             
  70 |     |         }
  71 |     |        
  72 |     |         
  73 |     |     }
  74 |     | 
  75 | *r  |     function testRemoveLiquidityInvariants(uint lpAmount) public {
  76 |     |         //PRECONDITIONS:
  77 |     | 
  78 | *r  |         uint pairBalanceBefore = testPair.balanceOf(address(user));
  79 |     |         //user needs some LP tokens to burn
  80 | *r  |         require(pairBalanceBefore > 0);
  81 | *   |         lpAmount = _between(lpAmount, 1, pairBalanceBefore);
  82 |     |         
  83 | *   |         (uint reserve1Before, uint reserve2Before) = UniswapV2Library.getReserves(address(factory), address(testToken1), address(testToken2));
  84 |     |         //need to provide more than min liquidity
  85 | *   |         uint kBefore = reserve1Before * reserve2Before;
  86 | *   |        (bool success1,) = user.proxy(address(testPair),abi.encodeWithSelector(testPair.approve.selector,address(router),uint(-1)));
  87 | *   |         require(success1);
  88 |     |         //CALL:
  89 |     | 
  90 |     |         
  91 | *   |         (bool success, ) = user.proxy(address(router),abi.encodeWithSelector(router.removeLiquidity.selector, address(testToken1), address(testToken2),lpAmount, 0, 0, address(user), uint(-1)));
  92 |     |         
  93 |     |         //POSTCONDITIONS
  94 |     |         
  95 | *   |         if (success) {
  96 | *   |             (uint reserve1After, uint reserve2After) = UniswapV2Library.getReserves(address(factory), address(testToken1), address(testToken2));
  97 | *   |             uint pairBalanceAfter = testPair.balanceOf(address(user));
  98 | *   |             uint kAfter = reserve1After*reserve2After;
  99 | *   |             assert(kBefore > kAfter);
 100 | *   |             assert(pairBalanceBefore > pairBalanceAfter);
 101 |     |         }
 102 |     |     }
 103 |     | 
 104 |     |     /*
 105 |     |     Helper function, copied from UniswapV2Library, needed in testPathIndependenceForSwaps.
 106 |     |     */
 107 | *r  |     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) 
 108 |     |     {
 109 | *r  |         require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');
 110 | *r  |         require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
 111 | *r  |         uint amountInWithFee = amountIn.mul(997);
 112 | *r  |         uint numerator = amountInWithFee.mul(reserveOut);
 113 | *   |         uint denominator = reserveIn.mul(1000).add(amountInWithFee);
 114 | *   |         amountOut = numerator / denominator;
 115 |     |     }
 116 |     | 
 117 |     |     /*
 118 |     |     Helper function, copied from UniswapV2Library, needed in testPathIndependenceForSwaps.
 119 |     |     */
 120 | *   |     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) 
 121 |     |     {
 122 | *   |         require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');
 123 | *   |         require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
 124 | *   |         uint numerator = reserveIn.mul(amountOut).mul(1000);
 125 | *   |         uint denominator = reserveOut.sub(amountOut).mul(997);
 126 | *   |         amountIn = (numerator / denominator).add(1);
 127 |     |     }
 128 |     | 
 129 |     |     /*
 130 |     |     Swapping x of testToken1 for y token of testToken2 and back should (roughly) give user x of testToken1.
 131 |     |     The following function checks this condition by assessing that the resulting x is no more than 3% from the original x.
 132 |     |     
 133 |     |     However, this condition may be false when the pool has roughly the same amount of A and B and user swaps minimal amount of tokens.
 134 |     |     For instance, if pool consists of:
 135 |     |     - 1000 A
 136 |     |     - 1500 B
 137 |     |     then user can swap 2 A for 2 B (1002 * 1497 = 1 499 994 < 1 500 000 = k, so the user won't get 3 B).
 138 |     |     Then, while user swaps back 2 B in the pool, he will get only 1 A, which is 50% loss from initial 2 A. 
 139 |     | 
 140 |     |     Similar situation may happen if the user pays for some constant amount of testToken2 more than he needs to.
 141 |     |     For instance, consider a pool with:
 142 |     |     - 20 000 of token A
 143 |     |     - 5 of token B
 144 |     |     Then, k = 100 000. If user pays 10 000 of A, we will get only 1 token B (since otherwise new k < 100 000).
 145 |     |     Now, k = 120 000, and the pool consists of 30 000 A and 4 B. 
 146 |     |     If he swaps back 1 B for A, he gets only 6 000 A back (pool consists of 5 B and 24 000 A and k stays the same).
 147 |     |     So, after the trades, he lost 4 000 of A, which is 40% of his initial balance.
 148 |     |     But this wouldn't happen if user swapped initially 5 000 of A for 1 B.
 149 |     |     
 150 |     |     To prevent such situations, the following function imposes following limits on the user's input:
 151 |     |     1. It has to be greater than MINIMUM_AMOUNT = 100.
 152 |     |     2. For some amount y of testToken2, it has to be minimal among all inputs giving the user y testTokens2 from the swap.
 153 |     |     */
 154 | *r  |     function testPathIndependenceForSwaps(uint x) public
 155 |     |     {
 156 |     |         // PRECONDITIONS:
 157 | *r  |         if (!complete) 
 158 | r   |             _init(1_000_000_000, 1_000_000_000);
 159 |     | 
 160 | *r  |          (uint reserve1, uint reserve2) = UniswapV2Library.getReserves(address(factory), address(testToken1), address(testToken2));
 161 |     |         // if reserve1 or reserve2 <= 1, then we cannot even make a swap
 162 | *r  |         require(reserve1 > 1);
 163 | *r  |         require(reserve2 > 1);
 164 |     | 
 165 | *r  |         uint MINIMUM_AMOUNT = 100;
 166 | *r  |         uint userBalance1 = testToken1.balanceOf(address(user));
 167 | *r  |         require(userBalance1 > MINIMUM_AMOUNT);
 168 |     | 
 169 | *r  |         x = _between(x, MINIMUM_AMOUNT, uint(-1) / 100); // uint(-1) / 100 needed in POSTCONDITIONS to avoid overflow
 170 | *r  |         x = _between(x, MINIMUM_AMOUNT, userBalance1);
 171 |     |         
 172 |     |         // use optimal x - it makes no sense to pay more for a given amount of tokens than necessary
 173 |     |         // nor it makes sense to "buy" 0 tokens
 174 |     |         // scope created to prevent "stack too deep" error
 175 |     |         {
 176 | *r  |             uint yOut = getAmountOut(x, reserve1, reserve2);
 177 | *   |             if (yOut == 0)
 178 | *   |                 yOut = 1;
 179 |     |             // x can only decrease here
 180 | *   |             x = getAmountIn(yOut, reserve1, reserve2);
 181 |     |         }
 182 | *   |         address[] memory path12 = new address[](2);
 183 | *   |         path12[0] = address(testToken1);
 184 | *   |         path12[1] = address(testToken2);
 185 | *   |         address[] memory path21 = new address[](2);
 186 | *   |         path21[0] = address(testToken2);
 187 | *   |         path21[1] = address(testToken1);
 188 |     |         
 189 | *   |         bool success;
 190 | *   |         bytes memory returnData;
 191 | *   |         uint[] memory amounts;
 192 | *   |         uint xOut;
 193 | *   |         uint y;
 194 |     | 
 195 |     |         // CALLS:
 196 | *   |         (success, returnData) = user.proxy(address(router), abi.encodeWithSelector(router.swapExactTokensForTokens.selector, x, 0, path12, address(user), uint(-1)));
 197 | *   |         if (!success)
 198 |     |             return;
 199 | *   |         amounts = abi.decode(returnData, (uint[]));
 200 |     |         // y should be the same as yOut computed previously
 201 | *   |         y = amounts[1];
 202 | *   |         (success, returnData) = user.proxy(address(router), abi.encodeWithSelector(router.swapExactTokensForTokens.selector, y, 0, path21, address(user), uint(-1)));
 203 | *   |         if (!success)
 204 |     |             return;
 205 | *   |         amounts = abi.decode(returnData, (uint[]));
 206 | *   |         xOut = amounts[1];
 207 |     | 
 208 |     |         // POSTCONDITIONS:
 209 | *   |         assert(x > xOut); // user cannot get more than he gave
 210 |     |         // 100 * (x - xOut) will not overflow since we constrained x to be < uint(-1) / 100 before
 211 | *   |         assert((x - xOut) * 100 <= 3 * x); // (x - xOut) / x <= 0.03; no more than 3% loss of funds
 212 |     |     }
 213 |     | }
 214 |     | // echidna .  --contract EchidnaUniV2Tester --config contracts/crytic/config.yaml

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/crytic/Setup.sol
  1 |     | pragma solidity ^0.6.0;
  2 |     | 
  3 |     | import "../uni-v2/UniswapV2Pair.sol";
  4 |     | import "../uni-v2/UniswapV2ERC20.sol";
  5 |     | import "../uni-v2/UniswapV2Factory.sol";
  6 |     | import "../libraries/UniswapV2Library.sol";
  7 |     | import "../uni-v2/UniswapV2Router01.sol";
  8 | *r  | 
  9 |     | contract Users {
 10 | *r  |     function proxy(address target, bytes memory _calldata)
 11 |     |         public
 12 | *r  |         returns (bool success, bytes memory returnData)
 13 |     |     {
 14 | *r  |         (success, returnData) = address(target).call(_calldata);
 15 |     |     }
 16 |     | }
 17 |     | 
 18 |     | contract Setup {
 19 |     |     UniswapV2ERC20 testToken1;
 20 |     |     UniswapV2ERC20 testToken2;
 21 |     |     UniswapV2Pair testPair;
 22 |     |     UniswapV2Factory factory;
 23 |     |     UniswapV2Router01 router;
 24 |     |     Users user;
 25 |     |     bool complete;
 26 |     | 
 27 |     |     constructor() public {
 28 |     |         testToken1 = new UniswapV2ERC20();
 29 |     |         testToken2 = new UniswapV2ERC20();
 30 |     |         factory = new UniswapV2Factory(address(this)); //this contract will be the fee setter
 31 |     |         router = new UniswapV2Router01(address(factory), address(0)); // we don't need to test WETH pairs for now
 32 |     |         address pair = factory.createPair(
 33 |     |             address(testToken1),
 34 |     |             address(testToken2)
 35 |     |         );
 36 |     |         testPair = UniswapV2Pair(pair);
 37 |     |         user = new Users();
 38 |     |         // Sort the test tokens we just created, for clarity when writing invariant tests later
 39 |     |         (address testTokenA, address testTokenB) = UniswapV2Library.sortTokens(address(testToken1), address(testToken2));
 40 |     |         testToken1 = UniswapV2ERC20(testTokenA);
 41 |     |         testToken2 = UniswapV2ERC20(testTokenB);
 42 |     |     }
 43 |     | 
 44 | *r  |     function _doApprovals() internal {
 45 | *r  |         user.proxy(
 46 | *r  |             address(testToken1),
 47 | *r  |             abi.encodeWithSelector(
 48 | *r  |                 testToken1.approve.selector,
 49 | *r  |                 address(router),
 50 | *r  |                 uint256(-1)
 51 |     |             )
 52 |     |         );
 53 | *r  |         user.proxy(
 54 | *r  |             address(testToken2),
 55 | *r  |             abi.encodeWithSelector(
 56 | *r  |                 testToken2.approve.selector,
 57 | *r  |                 address(router),
 58 | *r  |                 uint256(-1)
 59 |     |             )
 60 |     |         );
 61 |     |     }
 62 |     | 
 63 | *r  |     function _init(uint256 amount1, uint256 amount2) internal {
 64 | *r  |         testToken2.mint(address(user), amount2);
 65 | *r  |         testToken1.mint(address(user), amount1);
 66 | *r  |         _doApprovals();
 67 | *r  |         complete = true;
 68 |     |     }
 69 |     | 
 70 | *r  |     function _between(
 71 |     |         uint256 val,
 72 |     |         uint256 lower,
 73 |     |         uint256 upper
 74 | *r  |     ) internal pure returns (uint256) {
 75 | *r  |         return lower + (val % (upper - lower + 1));
 76 |     |     }
 77 |     | }
 78 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/interfaces/IERC20.sol
  1 |     | pragma solidity >=0.5.0;
  2 |     | 
  3 |     | interface IERC20 {
  4 |     |     event Approval(address indexed owner, address indexed spender, uint value);
  5 |     |     event Transfer(address indexed from, address indexed to, uint value);
  6 |     | 
  7 |     |     function name() external view returns (string memory);
  8 |     |     function symbol() external view returns (string memory);
  9 |     |     function decimals() external view returns (uint8);
 10 |     |     function totalSupply() external view returns (uint);
 11 |     |     function balanceOf(address owner) external view returns (uint);
 12 |     |     function allowance(address owner, address spender) external view returns (uint);
 13 |     | 
 14 |     |     function approve(address spender, uint value) external returns (bool);
 15 |     |     function transfer(address to, uint value) external returns (bool);
 16 |     |     function transferFrom(address from, address to, uint value) external returns (bool);
 17 |     | }
 18 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/interfaces/IUniswapV2Callee.sol
 1 |     | pragma solidity >=0.5.0;
 2 |     | 
 3 |     | interface IUniswapV2Callee {
 4 |     |     function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;
 5 |     | }
 6 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/interfaces/IUniswapV2ERC20.sol
  1 |     | pragma solidity >=0.5.0;
  2 |     | 
  3 |     | interface IUniswapV2ERC20 {
  4 |     |     event Approval(address indexed owner, address indexed spender, uint value);
  5 |     |     event Transfer(address indexed from, address indexed to, uint value);
  6 |     | 
  7 |     |     function name() external pure returns (string memory);
  8 |     |     function symbol() external pure returns (string memory);
  9 |     |     function decimals() external pure returns (uint8);
 10 |     |     function totalSupply() external view returns (uint);
 11 |     |     function balanceOf(address owner) external view returns (uint);
 12 |     |     function allowance(address owner, address spender) external view returns (uint);
 13 |     | 
 14 |     |     function approve(address spender, uint value) external returns (bool);
 15 |     |     function transfer(address to, uint value) external returns (bool);
 16 |     |     function transferFrom(address from, address to, uint value) external returns (bool);
 17 |     | 
 18 |     |     function DOMAIN_SEPARATOR() external view returns (bytes32);
 19 |     |     function PERMIT_TYPEHASH() external pure returns (bytes32);
 20 |     |     function nonces(address owner) external view returns (uint);
 21 |     | 
 22 |     |     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
 23 |     | }
 24 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/interfaces/IUniswapV2Factory.sol
  1 |     | pragma solidity >=0.5.0;
  2 |     | 
  3 |     | interface IUniswapV2Factory {
  4 |     |     event PairCreated(address indexed token0, address indexed token1, address pair, uint);
  5 |     | 
  6 |     |     function feeTo() external view returns (address);
  7 |     |     function feeToSetter() external view returns (address);
  8 |     | 
  9 |     |     function getPair(address tokenA, address tokenB) external view returns (address pair);
 10 |     |     function allPairs(uint) external view returns (address pair);
 11 |     |     function allPairsLength() external view returns (uint);
 12 |     | 
 13 |     |     function createPair(address tokenA, address tokenB) external returns (address pair);
 14 |     | 
 15 |     |     function setFeeTo(address) external;
 16 |     |     function setFeeToSetter(address) external;
 17 |     | }
 18 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/interfaces/IUniswapV2Pair.sol
  1 |     | pragma solidity >=0.5.0;
  2 |     | 
  3 |     | interface IUniswapV2Pair {
  4 |     |     event Approval(address indexed owner, address indexed spender, uint value);
  5 |     |     event Transfer(address indexed from, address indexed to, uint value);
  6 |     | 
  7 |     |     function name() external pure returns (string memory);
  8 |     |     function symbol() external pure returns (string memory);
  9 |     |     function decimals() external pure returns (uint8);
 10 |     |     function totalSupply() external view returns (uint);
 11 |     |     function balanceOf(address owner) external view returns (uint);
 12 |     |     function allowance(address owner, address spender) external view returns (uint);
 13 |     | 
 14 |     |     function approve(address spender, uint value) external returns (bool);
 15 |     |     function transfer(address to, uint value) external returns (bool);
 16 |     |     function transferFrom(address from, address to, uint value) external returns (bool);
 17 |     | 
 18 |     |     function DOMAIN_SEPARATOR() external view returns (bytes32);
 19 |     |     function PERMIT_TYPEHASH() external pure returns (bytes32);
 20 |     |     function nonces(address owner) external view returns (uint);
 21 |     | 
 22 |     |     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
 23 |     | 
 24 |     |     event Mint(address indexed sender, uint amount0, uint amount1);
 25 |     |     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
 26 |     |     event Swap(
 27 |     |         address indexed sender,
 28 |     |         uint amount0In,
 29 |     |         uint amount1In,
 30 |     |         uint amount0Out,
 31 |     |         uint amount1Out,
 32 |     |         address indexed to
 33 |     |     );
 34 |     |     event Sync(uint112 reserve0, uint112 reserve1);
 35 |     | 
 36 |     |     function MINIMUM_LIQUIDITY() external pure returns (uint);
 37 |     |     function factory() external view returns (address);
 38 |     |     function token0() external view returns (address);
 39 |     |     function token1() external view returns (address);
 40 |     |     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
 41 |     |     function price0CumulativeLast() external view returns (uint);
 42 |     |     function price1CumulativeLast() external view returns (uint);
 43 |     |     function kLast() external view returns (uint);
 44 |     | 
 45 |     |     function mint(address to) external returns (uint liquidity);
 46 |     |     function burn(address to) external returns (uint amount0, uint amount1);
 47 |     |     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
 48 |     |     function skim(address to) external;
 49 |     |     function sync() external;
 50 |     | 
 51 |     |     function initialize(address, address) external;
 52 |     | }
 53 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/interfaces/IUniswapV2Router01.sol
  1 |     | pragma solidity >=0.6.2;
  2 |     | 
  3 |     | interface IUniswapV2Router01 {
  4 |     |     function factory() external pure returns (address);
  5 |     |     function WETH() external pure returns (address);
  6 |     | 
  7 |     |     function addLiquidity(
  8 |     |         address tokenA,
  9 |     |         address tokenB,
 10 |     |         uint amountADesired,
 11 |     |         uint amountBDesired,
 12 |     |         uint amountAMin,
 13 |     |         uint amountBMin,
 14 |     |         address to,
 15 |     |         uint deadline
 16 |     |     ) external returns (uint amountA, uint amountB, uint liquidity);
 17 |     |     function addLiquidityETH(
 18 |     |         address token,
 19 |     |         uint amountTokenDesired,
 20 |     |         uint amountTokenMin,
 21 |     |         uint amountETHMin,
 22 |     |         address to,
 23 |     |         uint deadline
 24 |     |     ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
 25 |     |     function removeLiquidity(
 26 |     |         address tokenA,
 27 |     |         address tokenB,
 28 |     |         uint liquidity,
 29 |     |         uint amountAMin,
 30 |     |         uint amountBMin,
 31 |     |         address to,
 32 |     |         uint deadline
 33 |     |     ) external returns (uint amountA, uint amountB);
 34 |     |     function removeLiquidityETH(
 35 |     |         address token,
 36 |     |         uint liquidity,
 37 |     |         uint amountTokenMin,
 38 |     |         uint amountETHMin,
 39 |     |         address to,
 40 |     |         uint deadline
 41 |     |     ) external returns (uint amountToken, uint amountETH);
 42 |     |     function removeLiquidityWithPermit(
 43 |     |         address tokenA,
 44 |     |         address tokenB,
 45 |     |         uint liquidity,
 46 |     |         uint amountAMin,
 47 |     |         uint amountBMin,
 48 |     |         address to,
 49 |     |         uint deadline,
 50 |     |         bool approveMax, uint8 v, bytes32 r, bytes32 s
 51 |     |     ) external returns (uint amountA, uint amountB);
 52 |     |     function removeLiquidityETHWithPermit(
 53 |     |         address token,
 54 |     |         uint liquidity,
 55 |     |         uint amountTokenMin,
 56 |     |         uint amountETHMin,
 57 |     |         address to,
 58 |     |         uint deadline,
 59 |     |         bool approveMax, uint8 v, bytes32 r, bytes32 s
 60 |     |     ) external returns (uint amountToken, uint amountETH);
 61 |     |     function swapExactTokensForTokens(
 62 |     |         uint amountIn,
 63 |     |         uint amountOutMin,
 64 |     |         address[] calldata path,
 65 |     |         address to,
 66 |     |         uint deadline
 67 |     |     ) external returns (uint[] memory amounts);
 68 |     |     function swapTokensForExactTokens(
 69 |     |         uint amountOut,
 70 |     |         uint amountInMax,
 71 |     |         address[] calldata path,
 72 |     |         address to,
 73 |     |         uint deadline
 74 |     |     ) external returns (uint[] memory amounts);
 75 |     |     function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
 76 |     |         external
 77 |     |         payable
 78 |     |         returns (uint[] memory amounts);
 79 |     |     function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
 80 |     |         external
 81 |     |         returns (uint[] memory amounts);
 82 |     |     function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
 83 |     |         external
 84 |     |         returns (uint[] memory amounts);
 85 |     |     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
 86 |     |         external
 87 |     |         payable
 88 |     |         returns (uint[] memory amounts);
 89 |     | 
 90 |     |     function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
 91 |     |     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
 92 |     |     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
 93 |     |     function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
 94 |     |     function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
 95 |     | }

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/interfaces/IWETH.sol
 1 |     | pragma solidity >=0.5.0;
 2 |     | 
 3 |     | interface IWETH {
 4 |     |     function deposit() external payable;
 5 |     |     function transfer(address to, uint value) external returns (bool);
 6 |     |     function withdraw(uint) external;
 7 |     | }

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/libraries/Math.sol
  1 |     | pragma solidity ^0.6.0;
  2 |     | 
  3 |     | // a library for performing various math operations
  4 |     | 
  5 |     | library Math {
  6 | *   |     function min(uint x, uint y) internal pure returns (uint z) {
  7 | *   |         z = x < y ? x : y;
  8 |     |     }
  9 |     | 
 10 |     |     // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
 11 | *   |     function sqrt(uint y) internal pure returns (uint z) {
 12 | *   |         if (y > 3) {
 13 | *   |             z = y;
 14 | *   |             uint x = y / 2 + 1;
 15 | *   |             while (x < z) {
 16 | *   |                 z = x;
 17 | *   |                 x = (y / x + x) / 2;
 18 |     |             }
 19 |     |         } else if (y != 0) {
 20 |     |             z = 1;
 21 |     |         }
 22 |     |     }
 23 |     | }
 24 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/libraries/SafeMath.sol
  1 |     | pragma solidity >=0.5.16;
  2 |     | 
  3 |     | // a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)
  4 |     | 
  5 |     | library SafeMath {
  6 | *r  |     function add(uint x, uint y) internal pure returns (uint z) {
  7 | *r  |         require((z = x + y) >= x, 'ds-math-add-overflow');
  8 |     |     }
  9 |     | 
 10 | *   |     function sub(uint x, uint y) internal pure returns (uint z) {
 11 | *   |         require((z = x - y) <= x, 'ds-math-sub-underflow');
 12 |     |     }
 13 |     | 
 14 | *r  |     function mul(uint x, uint y) internal pure returns (uint z) {
 15 | *r  |         require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
 16 |     |     }
 17 |     | }
 18 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/libraries/TransferHelper.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | 
  3 |     | pragma solidity >=0.6.0;
  4 |     | 
  5 |     | // helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false
  6 |     | library TransferHelper {
  7 |     |     function safeApprove(
  8 |     |         address token,
  9 |     |         address to,
 10 |     |         uint256 value
 11 |     |     ) internal {
 12 |     |         // bytes4(keccak256(bytes('approve(address,uint256)')));
 13 |     |         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
 14 |     |         require(
 15 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 16 |     |             'TransferHelper::safeApprove: approve failed'
 17 |     |         );
 18 |     |     }
 19 |     | 
 20 |     |     function safeTransfer(
 21 |     |         address token,
 22 |     |         address to,
 23 |     |         uint256 value
 24 |     |     ) internal {
 25 |     |         // bytes4(keccak256(bytes('transfer(address,uint256)')));
 26 |     |         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
 27 |     |         require(
 28 |     |             success && (data.length == 0 || abi.decode(data, (bool))),
 29 |     |             'TransferHelper::safeTransfer: transfer failed'
 30 |     |         );
 31 |     |     }
 32 |     | 
 33 | *   |     function safeTransferFrom(
 34 |     |         address token,
 35 |     |         address from,
 36 |     |         address to,
 37 |     |         uint256 value
 38 |     |     ) internal {
 39 |     |         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
 40 | *   |         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
 41 | *   |         require(
 42 | *   |             success && (data.length == 0 || abi.decode(data, (bool))),
 43 |     |             'TransferHelper::transferFrom: transferFrom failed'
 44 |     |         );
 45 |     |     }
 46 |     | 
 47 |     |     function safeTransferETH(address to, uint256 value) internal {
 48 |     |         (bool success, ) = to.call{value: value}(new bytes(0));
 49 |     |         require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');
 50 |     |     }
 51 |     | }

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/libraries/UQ112x112.sol
  1 |     | pragma solidity ^0.6.0;
  2 |     | 
  3 |     | // a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))
  4 |     | 
  5 |     | // range: [0, 2**112 - 1]
  6 |     | // resolution: 1 / 2**112
  7 |     | 
  8 |     | library UQ112x112 {
  9 | *   |     uint224 constant Q112 = 2**112;
 10 |     | 
 11 |     |     // encode a uint112 as a UQ112x112
 12 | *   |     function encode(uint112 y) internal pure returns (uint224 z) {
 13 | *   |         z = uint224(y) * Q112; // never overflows
 14 |     |     }
 15 |     | 
 16 |     |     // divide a UQ112x112 by a uint112, returning a UQ112x112
 17 | *   |     function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {
 18 | *   |         z = x / uint224(y);
 19 |     |     }
 20 |     | }
 21 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/libraries/UniswapV2Library.sol
  1 |     | pragma solidity >=0.5.0;
  2 |     | 
  3 |     | import '../interfaces/IUniswapV2Pair.sol';
  4 |     | 
  5 |     | import "./SafeMath.sol";
  6 |     | 
  7 |     | library UniswapV2Library {
  8 |     |     using SafeMath for uint;
  9 |     |     
 10 |     |     // returns sorted token addresses, used to handle return values from pairs sorted in this order
 11 | *r  |     function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
 12 | *r  |         require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');
 13 | *r  |         (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
 14 | *r  |         require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');
 15 |     |     }
 16 |     | 
 17 |     |     // calculates the CREATE2 address for a pair without making any external calls
 18 | *r  |     function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
 19 | *r  |         (address token0, address token1) = sortTokens(tokenA, tokenB);
 20 | *r  |         pair = address(uint160(uint(keccak256(abi.encodePacked(
 21 |     |                 hex'ff',
 22 | *r  |                 factory,
 23 | *r  |                 keccak256(abi.encodePacked(token0, token1)),
 24 |     |                 hex'531622abdfb371accc3ef7183f26464b751744513c84f60ed118d68e2e727916'
 25 |     |                 //hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash
 26 |     |             )))));
 27 |     |     }
 28 |     | 
 29 |     |     // fetches and sorts the reserves for a pair
 30 | *r  |     function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
 31 | *r  |         (address token0,) = sortTokens(tokenA, tokenB);
 32 | *r  |         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
 33 | *r  |         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
 34 |     |     }
 35 |     | 
 36 |     |     // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset
 37 | *   |     function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
 38 | *   |         require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
 39 | *   |         require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
 40 | *   |         amountB = amountA.mul(reserveB) / reserveA;
 41 |     |     }
 42 |     | 
 43 |     |     // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset
 44 | *   |     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
 45 | *   |         require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');
 46 | *   |         require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
 47 | *   |         uint amountInWithFee = amountIn.mul(997);
 48 | *   |         uint numerator = amountInWithFee.mul(reserveOut);
 49 | *   |         uint denominator = reserveIn.mul(1000).add(amountInWithFee);
 50 | *   |         amountOut = numerator / denominator;
 51 |     |     }
 52 |     | 
 53 |     |     // given an output amount of an asset and pair reserves, returns a required input amount of the other asset
 54 |     |     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
 55 |     |         require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');
 56 |     |         require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
 57 |     |         uint numerator = reserveIn.mul(amountOut).mul(1000);
 58 |     |         uint denominator = reserveOut.sub(amountOut).mul(997);
 59 |     |         amountIn = (numerator / denominator).add(1);
 60 |     |     }
 61 |     | 
 62 |     |     // performs chained getAmountOut calculations on any number of pairs
 63 | *   |     function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
 64 | *   |         require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
 65 | *   |         amounts = new uint[](path.length);
 66 | *   |         amounts[0] = amountIn;
 67 | *   |         for (uint i; i < path.length - 1; i++) {
 68 | *   |             (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
 69 | *   |             amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
 70 |     |         }
 71 |     |     }
 72 |     | 
 73 |     |     // performs chained getAmountIn calculations on any number of pairs
 74 |     |     function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {
 75 |     |         require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
 76 |     |         amounts = new uint[](path.length);
 77 |     |         amounts[amounts.length - 1] = amountOut;
 78 |     |         for (uint i = path.length - 1; i > 0; i--) {
 79 |     |             (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
 80 |     |             amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
 81 |     |         }
 82 |     |     }
 83 |     | }

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/test/ERC20.sol
  1 |     | pragma solidity ^0.6.0;
  2 |     | 
  3 |     | import '../uni-v2/UniswapV2ERC20.sol';
  4 |     | 
  5 |     | contract ERC20 is UniswapV2ERC20 {
  6 |     |     constructor(uint _totalSupply) public {
  7 |     |         _mint(msg.sender, _totalSupply);
  8 |     |     }
  9 |     | }
 10 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/uni-v2/UniswapV2ERC20.sol
  1 |     | pragma solidity ^0.6.0;
  2 |     | 
  3 |     | import '../interfaces/IUniswapV2ERC20.sol';
  4 |     | import '../libraries/SafeMath.sol';
  5 | *r  | 
  6 |     | contract UniswapV2ERC20 {
  7 |     |     using SafeMath for uint;
  8 |     | 
  9 |     |     string public constant name = 'Uniswap V2';
 10 |     |     string public constant symbol = 'UNI-V2';
 11 |     |     uint8 public constant decimals = 18;
 12 |     |     uint  public totalSupply;
 13 | *r  |     mapping(address => uint) public balanceOf;
 14 |     |     mapping(address => mapping(address => uint)) public allowance;
 15 |     | 
 16 |     |     bytes32 public DOMAIN_SEPARATOR;
 17 |     |     // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
 18 |     |     bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
 19 |     |     mapping(address => uint) public nonces;
 20 |     | 
 21 |     |     event Approval(address indexed owner, address indexed spender, uint value);
 22 |     |     event Transfer(address indexed from, address indexed to, uint value);
 23 |     | 
 24 |     |     constructor() public {
 25 |     |         uint chainId;
 26 |     |         assembly {
 27 |     |             chainId := chainid()
 28 |     |         } 
 29 |     |         DOMAIN_SEPARATOR = keccak256(
 30 |     |             abi.encode(
 31 |     |                 keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),
 32 |     |                 keccak256(bytes(name)),
 33 |     |                 keccak256(bytes('1')),
 34 |     |                 chainId,
 35 |     |                 address(this)
 36 |     |             )
 37 |     |         );
 38 |     |     }
 39 |     | 
 40 | *r  |     function _mint(address to, uint value) internal {
 41 | *r  |         totalSupply = totalSupply.add(value);
 42 | *r  |         balanceOf[to] = balanceOf[to].add(value);
 43 | *r  |         emit Transfer(address(0), to, value);
 44 |     |     }
 45 |     | 
 46 | *   |     function _burn(address from, uint value) internal {
 47 | *   |         balanceOf[from] = balanceOf[from].sub(value);
 48 | *   |         totalSupply = totalSupply.sub(value);
 49 | *   |         emit Transfer(from, address(0), value);
 50 |     |     }
 51 |     | 
 52 | *r  |     function _approve(address owner, address spender, uint value) private {
 53 | *r  |         allowance[owner][spender] = value;
 54 | *r  |         emit Approval(owner, spender, value);
 55 |     |     }
 56 |     | 
 57 | *   |     function _transfer(address from, address to, uint value) private {
 58 | *   |         balanceOf[from] = balanceOf[from].sub(value);
 59 | *   |         balanceOf[to] = balanceOf[to].add(value);
 60 | *   |         emit Transfer(from, to, value);
 61 |     |     }
 62 |     | 
 63 | *r  |     function approve(address spender, uint value) external returns (bool) {
 64 | *r  |         _approve(msg.sender, spender, value);
 65 | *r  |         return true;
 66 |     |     }
 67 |     | 
 68 | *   |     function transfer(address to, uint value) external virtual returns (bool) {
 69 | *   |         _transfer(msg.sender, to, value);
 70 | *   |         return true;
 71 |     |     }
 72 |     | 
 73 | *   |     function transferFrom(address from, address to, uint value) external returns (bool) {
 74 | *   |         if (allowance[from][msg.sender] != uint(-1)) {
 75 |     |             allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);
 76 |     |         }
 77 | *   |         _transfer(from, to, value);
 78 | *   |         return true;
 79 |     |     }
 80 |     | 
 81 |     |     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
 82 |     |         require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');
 83 |     |         bytes32 digest = keccak256(
 84 |     |             abi.encodePacked(
 85 |     |                 '\x19\x01',
 86 |     |                 DOMAIN_SEPARATOR,
 87 |     |                 keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))
 88 |     |             )
 89 |     |         );
 90 |     |         address recoveredAddress = ecrecover(digest, v, r, s);
 91 |     |         require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');
 92 |     |         _approve(owner, spender, value);
 93 |     |     }
 94 | *r  |     function mint(address account, uint amount) external {
 95 | *r  |         _mint(account,amount);
 96 |     |     }
 97 |     | }
 98 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/uni-v2/UniswapV2Factory.sol
  1 |     | pragma solidity ^0.6.0;
  2 |     | 
  3 |     | import '../interfaces/IUniswapV2Factory.sol';
  4 |     | import './UniswapV2Pair.sol';
  5 | *   | 
  6 |     | contract UniswapV2Factory is IUniswapV2Factory {
  7 | *   |     address public override feeTo;
  8 |     |     address public override feeToSetter;
  9 |     | 
 10 | *   |     mapping(address => mapping(address => address)) public override getPair;
 11 |     |     address[] public override allPairs;
 12 |     | 
 13 |     |     event PairCreated(address indexed token0, address indexed token1, address pair, uint);
 14 |     | 
 15 |     |     constructor(address _feeToSetter) public {
 16 |     |         feeToSetter = _feeToSetter;
 17 |     |     }
 18 |     | 
 19 |     |     function allPairsLength() external view override returns (uint) {
 20 |     |         return allPairs.length;
 21 |     |     }
 22 |     | 
 23 |     |     function createPair(address tokenA, address tokenB) external override  returns (address pair) {
 24 |     |         require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');
 25 |     |         (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
 26 |     |         require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');
 27 |     |         require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient
 28 |     |         bytes memory bytecode = type(UniswapV2Pair).creationCode;
 29 |     |         bytes32 salt = keccak256(abi.encodePacked(token0, token1));
 30 |     |         assembly {
 31 |     |             pair := create2(0, add(bytecode, 32), mload(bytecode), salt)
 32 |     |         }
 33 |     |         IUniswapV2Pair(pair).initialize(token0, token1);
 34 |     |         getPair[token0][token1] = pair;
 35 |     |         getPair[token1][token0] = pair; // populate mapping in the reverse direction
 36 |     |         allPairs.push(pair);
 37 |     |         emit PairCreated(token0, token1, pair, allPairs.length);
 38 |     |     }
 39 |     | 
 40 |     |     function setFeeTo(address _feeTo) external override  {
 41 |     |         require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
 42 |     |         feeTo = _feeTo;
 43 |     |     }
 44 |     | 
 45 |     |     function setFeeToSetter(address _feeToSetter) external override {
 46 |     |         require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
 47 |     |         feeToSetter = _feeToSetter;
 48 |     |     }
 49 |     | }
 50 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/uni-v2/UniswapV2Pair.sol
   1 |     | pragma solidity ^0.6.0;
   2 |     | 
   3 |     | import '../interfaces/IUniswapV2Pair.sol';
   4 |     | import './UniswapV2ERC20.sol';
   5 |     | import '../libraries/Math.sol';
   6 |     | import '../libraries/UQ112x112.sol';
   7 |     | import '../interfaces/IERC20.sol';
   8 |     | import '../interfaces/IUniswapV2Factory.sol';
   9 |     | import '../interfaces/IUniswapV2Callee.sol';
  10 | *r  | 
  11 |     | contract UniswapV2Pair is UniswapV2ERC20 {
  12 |     |     using SafeMath  for uint;
  13 |     |     using UQ112x112 for uint224;
  14 |     | 
  15 | *   |     uint public constant MINIMUM_LIQUIDITY = 10**3;
  16 | *   |     bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));
  17 |     | 
  18 |     |     address public factory;
  19 |     |     address public token0;
  20 |     |     address public token1;
  21 |     | 
  22 |     |     uint112 private reserve0;           // uses single storage slot, accessible via getReserves
  23 |     |     uint112 private reserve1;           // uses single storage slot, accessible via getReserves
  24 |     |     uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves
  25 |     | 
  26 |     |     uint public price0CumulativeLast;
  27 |     |     uint public price1CumulativeLast;
  28 |     |     uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event
  29 |     | 
  30 |     |     uint private unlocked = 1;
  31 |     |     modifier lock() {
  32 | *   |         require(unlocked == 1, 'UniswapV2: LOCKED');
  33 | *   |         unlocked = 0;
  34 | *   |         _;
  35 | *   |         unlocked = 1;
  36 |     |     }
  37 |     | 
  38 | *r  |     function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {
  39 | *r  |         _reserve0 = reserve0;
  40 | *r  |         _reserve1 = reserve1;
  41 | *r  |         _blockTimestampLast = blockTimestampLast;
  42 |     |     }
  43 |     | 
  44 | *   |     function _safeTransfer(address token, address to, uint value) private {
  45 | *   |         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
  46 | *   |         require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');
  47 |     |     }
  48 |     | 
  49 |     |     event Mint(address indexed sender, uint amount0, uint amount1);
  50 |     |     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
  51 |     |     event Swap(
  52 |     |         address indexed sender,
  53 |     |         uint amount0In,
  54 |     |         uint amount1In,
  55 |     |         uint amount0Out,
  56 |     |         uint amount1Out,
  57 |     |         address indexed to
  58 |     |     );
  59 |     |     event Sync(uint112 reserve0, uint112 reserve1);
  60 |     | 
  61 |     |     constructor() public {
  62 |     |         factory = msg.sender;
  63 |     |     }
  64 |     | 
  65 |     |     // called once by the factory at time of deployment
  66 |     |     function initialize(address _token0, address _token1) external {
  67 |     |         require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check
  68 |     |         token0 = _token0;
  69 |     |         token1 = _token1;
  70 |     |     }
  71 |     | 
  72 |     |     // update reserves and, on the first call per block, price accumulators
  73 | *   |     function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
  74 | *   |         require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');
  75 | *   |         uint32 blockTimestamp = uint32(block.timestamp % 2**32);
  76 | *   |         uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
  77 | *   |         if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
  78 |     |             // * never overflows, and + overflow is desired
  79 | *   |             price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
  80 | *   |             price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
  81 |     |         }
  82 | *   |         reserve0 = uint112(balance0);
  83 | *   |         reserve1 = uint112(balance1);
  84 | *   |         blockTimestampLast = blockTimestamp;
  85 | *   |         emit Sync(reserve0, reserve1);
  86 |     |     }
  87 |     | 
  88 |     |     // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)
  89 | *   |     function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
  90 | *   |         address feeTo = IUniswapV2Factory(factory).feeTo();
  91 | *   |         feeOn = feeTo != address(0);
  92 | *   |         uint _kLast = kLast; // gas savings
  93 | *   |         if (feeOn) {
  94 |     |             if (_kLast != 0) {
  95 |     |                 uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
  96 |     |                 uint rootKLast = Math.sqrt(_kLast);
  97 |     |                 if (rootK > rootKLast) {
  98 |     |                     uint numerator = totalSupply.mul(rootK.sub(rootKLast));
  99 |     |                     uint denominator = rootK.mul(5).add(rootKLast);
 100 |     |                     uint liquidity = numerator / denominator;
 101 |     |                     if (liquidity > 0) _mint(feeTo, liquidity);
 102 |     |                 }
 103 |     |             }
 104 | *   |         } else if (_kLast != 0) {
 105 |     |             kLast = 0;
 106 |     |         }
 107 |     |     }
 108 |     | 
 109 |     |     // this low-level function should be called from a contract which performs important safety checks
 110 | *   |     function mint(address to) external lock returns (uint liquidity) {
 111 | *   |         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
 112 | *   |         uint balance0 = IERC20(token0).balanceOf(address(this));
 113 | *   |         uint balance1 = IERC20(token1).balanceOf(address(this));
 114 | *   |         uint amount0 = balance0.sub(_reserve0);
 115 | *   |         uint amount1 = balance1.sub(_reserve1);
 116 |     | 
 117 | *   |         bool feeOn = _mintFee(_reserve0, _reserve1);
 118 | *   |         uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
 119 | *   |         if (_totalSupply == 0) {
 120 | *   |             liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
 121 | *   |            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens
 122 |     |         } else {
 123 | *   |             liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
 124 |     |         }
 125 | *   |         require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');
 126 | *   |         _mint(to, liquidity);
 127 |     | 
 128 | *   |         _update(balance0, balance1, _reserve0, _reserve1);
 129 | *   |         if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
 130 | *   |         emit Mint(msg.sender, amount0, amount1);
 131 |     |     }
 132 |     | 
 133 |     |     // this low-level function should be called from a contract which performs important safety checks
 134 | *   |     function burn(address to) external lock returns (uint amount0, uint amount1) {
 135 | *   |         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
 136 | *   |         address _token0 = token0;                                // gas savings
 137 | *   |         address _token1 = token1;                                // gas savings
 138 | *   |         uint balance0 = IERC20(_token0).balanceOf(address(this));
 139 | *   |         uint balance1 = IERC20(_token1).balanceOf(address(this));
 140 | *   |         uint liquidity = balanceOf[address(this)];
 141 |     | 
 142 | *   |         bool feeOn = _mintFee(_reserve0, _reserve1);
 143 | *   |         uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
 144 | *   |         amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution
 145 | *   |         amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution
 146 | *   |         require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');
 147 | *   |         _burn(address(this), liquidity);
 148 | *   |         _safeTransfer(_token0, to, amount0);
 149 | *   |         _safeTransfer(_token1, to, amount1);
 150 | *   |         balance0 = IERC20(_token0).balanceOf(address(this));
 151 | *   |         balance1 = IERC20(_token1).balanceOf(address(this));
 152 |     | 
 153 | *   |         _update(balance0, balance1, _reserve0, _reserve1);
 154 | *   |         if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
 155 | *   |         emit Burn(msg.sender, amount0, amount1, to);
 156 |     |     }
 157 |     | 
 158 |     |     // this low-level function should be called from a contract which performs important safety checks
 159 | *   |     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {
 160 | *   |         require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');
 161 | *   |         (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
 162 | *   |         require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');
 163 |     | 
 164 | *   |         uint balance0;
 165 | *   |         uint balance1;
 166 |     |         { // scope for _token{0,1}, avoids stack too deep errors
 167 | *   |         address _token0 = token0;
 168 | *   |         address _token1 = token1;
 169 | *   |         require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');
 170 | *   |         if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens
 171 | *   |         if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens
 172 | *   |         if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);
 173 | *   |         balance0 = IERC20(_token0).balanceOf(address(this));
 174 | *   |         balance1 = IERC20(_token1).balanceOf(address(this));
 175 |     |         }
 176 | *   |         uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
 177 | *   |         uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
 178 | *   |         require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');
 179 |     |         { // scope for reserve{0,1}Adjusted, avoids stack too deep errors
 180 | *   |         uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));
 181 | *   |         uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));
 182 | *   |         require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
 183 |     |         }
 184 |     | 
 185 | *   |         _update(balance0, balance1, _reserve0, _reserve1);
 186 | *   |         emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
 187 |     |     }
 188 |     | 
 189 |     |     // force balances to match reserves
 190 |     |     function skim(address to) external lock {
 191 |     |         address _token0 = token0; // gas savings
 192 |     |         address _token1 = token1; // gas savings
 193 |     |         _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));
 194 |     |         _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));
 195 |     |     }
 196 |     | 
 197 |     |     // force reserves to match balances
 198 |     |     function sync() external lock {
 199 |     |         _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);
 200 |     |     }
 201 |     | }
 202 |     | 

/Users/souravsuman/Documents/Personal/Echidna/6. uniswap periphery/contracts/uni-v2/UniswapV2Router01.sol
   1 |     | pragma solidity =0.6.6;
   2 |     | 
   3 |     | import '../interfaces/IUniswapV2Factory.sol';
   4 |     | import '../libraries/TransferHelper.sol';
   5 |     | 
   6 |     | import '../libraries/UniswapV2Library.sol';
   7 |     | import '../interfaces/IUniswapV2Router01.sol';
   8 |     | import '../interfaces/IERC20.sol';
   9 |     | import '../interfaces/IWETH.sol';
  10 | *   | 
  11 |     | contract UniswapV2Router01 is IUniswapV2Router01 {
  12 |     |     address public immutable override factory;
  13 |     |     address public immutable override WETH;
  14 |     | 
  15 |     |     modifier ensure(uint deadline) {
  16 | *   |         require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');
  17 | *   |         _;
  18 |     |     }
  19 |     | 
  20 |     |     constructor(address _factory, address _WETH) public {
  21 |     |         factory = _factory;
  22 |     |         WETH = _WETH;
  23 |     |     }
  24 |     | 
  25 |     |     receive() external payable {
  26 |     |         assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract
  27 |     |     }
  28 |     | 
  29 |     |     // **** ADD LIQUIDITY ****
  30 | *   |     function _addLiquidity(
  31 |     |         address tokenA,
  32 |     |         address tokenB,
  33 |     |         uint amountADesired,
  34 |     |         uint amountBDesired,
  35 |     |         uint amountAMin,
  36 |     |         uint amountBMin
  37 | *   |     ) private returns (uint amountA, uint amountB) {
  38 |     |         // create the pair if it doesn't exist yet
  39 | *   |         if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {
  40 |     |             IUniswapV2Factory(factory).createPair(tokenA, tokenB);
  41 |     |         }
  42 | *   |         (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);
  43 | *   |         if (reserveA == 0 && reserveB == 0) {
  44 | *   |             (amountA, amountB) = (amountADesired, amountBDesired);
  45 |     |         } else {
  46 | *   |             uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);
  47 | *   |             if (amountBOptimal <= amountBDesired) {
  48 | *   |                 require(amountBOptimal >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');
  49 | *   |                 (amountA, amountB) = (amountADesired, amountBOptimal);
  50 |     |             } else {
  51 | *   |                 uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);
  52 | *   |                 assert(amountAOptimal <= amountADesired);
  53 | *   |                 require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');
  54 | *   |                 (amountA, amountB) = (amountAOptimal, amountBDesired);
  55 |     |             }
  56 |     |         }
  57 |     |     }
  58 | *   |     function addLiquidity(
  59 |     |         address tokenA,
  60 |     |         address tokenB,
  61 |     |         uint amountADesired,
  62 |     |         uint amountBDesired,
  63 |     |         uint amountAMin,
  64 |     |         uint amountBMin,
  65 |     |         address to,
  66 |     |         uint deadline
  67 | *   |     ) external override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
  68 | *   |         (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
  69 | *   |         address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
  70 | *   |         TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
  71 | *   |         TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
  72 | *   |         liquidity = IUniswapV2Pair(pair).mint(to);
  73 |     |     }
  74 |     |     function addLiquidityETH(
  75 |     |         address token,
  76 |     |         uint amountTokenDesired,
  77 |     |         uint amountTokenMin,
  78 |     |         uint amountETHMin,
  79 |     |         address to,
  80 |     |         uint deadline
  81 |     |     ) external override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {
  82 |     |         (amountToken, amountETH) = _addLiquidity(
  83 |     |             token,
  84 |     |             WETH,
  85 |     |             amountTokenDesired,
  86 |     |             msg.value,
  87 |     |             amountTokenMin,
  88 |     |             amountETHMin
  89 |     |         );
  90 |     |         address pair = UniswapV2Library.pairFor(factory, token, WETH);
  91 |     |         TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
  92 |     |         IWETH(WETH).deposit{value: amountETH}();
  93 |     |         assert(IWETH(WETH).transfer(pair, amountETH));
  94 |     |         liquidity = IUniswapV2Pair(pair).mint(to);
  95 |     |         if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH); // refund dust eth, if any
  96 |     |     }
  97 |     | 
  98 |     |     // **** REMOVE LIQUIDITY ****
  99 | *   |     function removeLiquidity(
 100 |     |         address tokenA,
 101 |     |         address tokenB,
 102 |     |         uint liquidity,
 103 |     |         uint amountAMin,
 104 |     |         uint amountBMin,
 105 |     |         address to,
 106 |     |         uint deadline
 107 | *   |     ) public override ensure(deadline) returns (uint amountA, uint amountB) {
 108 | *   |         address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
 109 | *   |         IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair
 110 | *   |         (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);
 111 | *   |         (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
 112 | *   |         (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
 113 | *   |         require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');
 114 | *   |         require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');
 115 |     |     }
 116 |     |     function removeLiquidityETH(
 117 |     |         address token,
 118 |     |         uint liquidity,
 119 |     |         uint amountTokenMin,
 120 |     |         uint amountETHMin,
 121 |     |         address to,
 122 |     |         uint deadline
 123 |     |     ) public override ensure(deadline) returns (uint amountToken, uint amountETH) {
 124 |     |         (amountToken, amountETH) = removeLiquidity(
 125 |     |             token,
 126 |     |             WETH,
 127 |     |             liquidity,
 128 |     |             amountTokenMin,
 129 |     |             amountETHMin,
 130 |     |             address(this),
 131 |     |             deadline
 132 |     |         );
 133 |     |         TransferHelper.safeTransfer(token, to, amountToken);
 134 |     |         IWETH(WETH).withdraw(amountETH);
 135 |     |         TransferHelper.safeTransferETH(to, amountETH);
 136 |     |     }
 137 |     |     function removeLiquidityWithPermit(
 138 |     |         address tokenA,
 139 |     |         address tokenB,
 140 |     |         uint liquidity,
 141 |     |         uint amountAMin,
 142 |     |         uint amountBMin,
 143 |     |         address to,
 144 |     |         uint deadline,
 145 |     |         bool approveMax, uint8 v, bytes32 r, bytes32 s
 146 |     |     ) external override returns (uint amountA, uint amountB) {
 147 |     |         address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
 148 |     |         uint value = approveMax ? uint(-1) : liquidity;
 149 |     |         IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
 150 |     |         (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
 151 |     |     }
 152 |     |     function removeLiquidityETHWithPermit(
 153 |     |         address token,
 154 |     |         uint liquidity,
 155 |     |         uint amountTokenMin,
 156 |     |         uint amountETHMin,
 157 |     |         address to,
 158 |     |         uint deadline,
 159 |     |         bool approveMax, uint8 v, bytes32 r, bytes32 s
 160 |     |     ) external override returns (uint amountToken, uint amountETH) {
 161 |     |         address pair = UniswapV2Library.pairFor(factory, token, WETH);
 162 |     |         uint value = approveMax ? uint(-1) : liquidity;
 163 |     |         IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
 164 |     |         (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);
 165 |     |     }
 166 |     | 
 167 |     |     // **** SWAP ****
 168 |     |     // requires the initial amount to have already been sent to the first pair
 169 | *   |     function _swap(uint[] memory amounts, address[] memory path, address _to) private {
 170 | *   |         for (uint i; i < path.length - 1; i++) {
 171 | *   |             (address input, address output) = (path[i], path[i + 1]);
 172 | *   |             (address token0,) = UniswapV2Library.sortTokens(input, output);
 173 | *   |             uint amountOut = amounts[i + 1];
 174 | *   |             (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
 175 | *   |             address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;
 176 | *   |             IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));
 177 |     |         }
 178 |     |     }
 179 | *   |     function swapExactTokensForTokens(
 180 |     |         uint amountIn,
 181 |     |         uint amountOutMin,
 182 |     |         address[] calldata path,
 183 |     |         address to,
 184 |     |         uint deadline
 185 | *   |     ) external override ensure(deadline) returns (uint[] memory amounts) {
 186 | *   |         amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);
 187 | *   |         require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
 188 | *   |         TransferHelper.safeTransferFrom(path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);
 189 | *   |         _swap(amounts, path, to);
 190 |     |     }
 191 |     |     function swapTokensForExactTokens(
 192 |     |         uint amountOut,
 193 |     |         uint amountInMax,
 194 |     |         address[] calldata path,
 195 |     |         address to,
 196 |     |         uint deadline
 197 |     |     ) external override ensure(deadline) returns (uint[] memory amounts) {
 198 |     |         amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);
 199 |     |         require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
 200 |     |         TransferHelper.safeTransferFrom(path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);
 201 |     |         _swap(amounts, path, to);
 202 |     |     }
 203 |     |     function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
 204 |     |         external
 205 |     |         override
 206 |     |         payable
 207 |     |         ensure(deadline)
 208 |     |         returns (uint[] memory amounts)
 209 |     |     {
 210 |     |         require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
 211 |     |         amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);
 212 |     |         require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
 213 |     |         IWETH(WETH).deposit{value: amounts[0]}();
 214 |     |         assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));
 215 |     |         _swap(amounts, path, to);
 216 |     |     }
 217 |     |     function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
 218 |     |         external
 219 |     |         override
 220 |     |         ensure(deadline)
 221 |     |         returns (uint[] memory amounts)
 222 |     |     {
 223 |     |         require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
 224 |     |         amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);
 225 |     |         require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
 226 |     |         TransferHelper.safeTransferFrom(path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);
 227 |     |         _swap(amounts, path, address(this));
 228 |     |         IWETH(WETH).withdraw(amounts[amounts.length - 1]);
 229 |     |         TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
 230 |     |     }
 231 |     |     function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
 232 |     |         external
 233 |     |         override
 234 |     |         ensure(deadline)
 235 |     |         returns (uint[] memory amounts)
 236 |     |     {
 237 |     |         require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
 238 |     |         amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);
 239 |     |         require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
 240 |     |         TransferHelper.safeTransferFrom(path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);
 241 |     |         _swap(amounts, path, address(this));
 242 |     |         IWETH(WETH).withdraw(amounts[amounts.length - 1]);
 243 |     |         TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
 244 |     |     }
 245 |     |     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
 246 |     |         external
 247 |     |         override
 248 |     |         payable
 249 |     |         ensure(deadline)
 250 |     |         returns (uint[] memory amounts)
 251 |     |     {
 252 |     |         require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
 253 |     |         amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);
 254 |     |         require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
 255 |     |         IWETH(WETH).deposit{value: amounts[0]}();
 256 |     |         assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));
 257 |     |         _swap(amounts, path, to);
 258 |     |         if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]); // refund dust eth, if any
 259 |     |     }
 260 |     | 
 261 |     |     function quote(uint amountA, uint reserveA, uint reserveB) public pure override returns (uint amountB) {
 262 |     |         return UniswapV2Library.quote(amountA, reserveA, reserveB);
 263 |     |     }
 264 |     | 
 265 |     |     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure override returns (uint amountOut) {
 266 |     |         return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);
 267 |     |     }
 268 |     | 
 269 |     |     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure override returns (uint amountIn) {
 270 |     |         return UniswapV2Library.getAmountOut(amountOut, reserveIn, reserveOut);
 271 |     |     }
 272 |     | 
 273 |     |     function getAmountsOut(uint amountIn, address[] memory path) public view override returns (uint[] memory amounts) {
 274 |     |         return UniswapV2Library.getAmountsOut(factory, amountIn, path);
 275 |     |     }
 276 |     | 
 277 |     |     function getAmountsIn(uint amountOut, address[] memory path) public view override returns (uint[] memory amounts) {
 278 |     |         return UniswapV2Library.getAmountsIn(factory, amountOut, path);
 279 |     |     }
 280 |     | }

